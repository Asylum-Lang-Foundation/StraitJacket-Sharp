//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Asylum.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AsylumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, AS=37, ASYNC=38, ATOMIC=39, 
		AWAIT=40, BREAK=41, CASE=42, CONST=43, DEFAULT=44, DO=45, ELIF=46, ELSE=47, 
		ENUM=48, EXPLICITCAST=49, EXTERN=50, FOR=51, FUNCTION=52, GET=53, IF=54, 
		IMPL=55, IMPLICITCAST=56, IN=57, INLINE=58, INTERFACE=59, INTERNAL=60, 
		IS=61, LOOP=62, NAMESPACE=63, NEW=64, OPERATOR=65, PRIVATE=66, PROTECTED=67, 
		PUBLIC=68, RETURN=69, SET=70, SIZEOF=71, STATIC=72, STRUCT=73, SWITCH=74, 
		TYPEDEF=75, TYPEOF=76, UNSAFE=77, UNION=78, USING=79, VOLATILE=80, WHILE=81, 
		ASSIGN_OP_EQ=82, ASSIGN_OP_ADD_EQ=83, ASSIGN_OP_SUB_EQ=84, ASSIGN_OP_EXP_EQ=85, 
		ASSIGN_OP_MUL_EQ=86, ASSIGN_OP_DIV_EQ=87, ASSIGN_OP_MOD_EQ=88, ASSIGN_OP_AND_EQ=89, 
		ASSIGN_OP_OR_EQ=90, ASSIGN_OP_XOR_EQ=91, ASSIGN_OP_LSHIFT_EQ=92, ASSIGN_OP_RSHIFT_EQ=93, 
		ASSIGN_OP_CHECK_NULL=94, OP_ADD=95, OP_ADDRESS_OF=96, OP_AND=97, OP_BITWISE_OR=98, 
		OP_DIV=99, OP_EQ=100, OP_GE=101, OP_GT=102, OP_LAMBDA=103, OP_LE=104, 
		OP_LSHIFT=105, OP_LT=106, OP_MEMBER_ACCESS=107, OP_MINUS_MINUS=108, OP_MOD=109, 
		OP_MUL=110, OP_NE=111, OP_NOT=112, OP_NULL_CHECK=113, OP_OR=114, OP_PLUS_PLUS=115, 
		OP_RANGE=116, OP_REFERENCE_POINTER=117, OP_RET=118, OP_RSHIFT=119, OP_SUB=120, 
		OP_TILDE=121, UNSIGNED=122, SIGNED=123, FIXED=124, INTEGER=125, IDENTIFIER=126, 
		ESCAPE_SEQUENCE=127, STRING=128, LINE_COMMENT=129, COMMENT=130, WHITESPACES=131;
	public const int
		RULE_init = 0, RULE_universal_statement = 1, RULE_using_statement = 2, 
		RULE_namespace_statement = 3, RULE_extern_function_property = 4, RULE_extern_function_definition = 5, 
		RULE_function_property = 6, RULE_function_definition = 7, RULE_constructor_definition = 8, 
		RULE_operator_definition = 9, RULE_attribute = 10, RULE_enum_definition = 11, 
		RULE_enum_entry = 12, RULE_union_definition = 13, RULE_struct_definition = 14, 
		RULE_interface_definition = 15, RULE_implementation_definition = 16, RULE_implementation_entry = 17, 
		RULE_cast_definition = 18, RULE_typedef_definition = 19, RULE_struct_entry = 20, 
		RULE_struct_entry_property = 21, RULE_code_body = 22, RULE_code_statement = 23, 
		RULE_loop = 24, RULE_while_loop = 25, RULE_do_while_loop = 26, RULE_for_loop = 27, 
		RULE_break_statement = 28, RULE_if_statement = 29, RULE_switch_case = 30, 
		RULE_switch_rule = 31, RULE_function_call = 32, RULE_constructor_with_initializers = 33, 
		RULE_initializer_value = 34, RULE_return_value = 35, RULE_type_implements_extended = 36, 
		RULE_type_implements_extended_expression = 37, RULE_type_implements = 38, 
		RULE_generic_definition = 39, RULE_generic_specifier = 40, RULE_expression = 41, 
		RULE_primary_expression = 42, RULE_unary_expression = 43, RULE_access_modifier = 44, 
		RULE_variable_assignment = 45, RULE_variable_declaration = 46, RULE_label = 47, 
		RULE_variable_arguments = 48, RULE_variable_parameter = 49, RULE_variable_type = 50, 
		RULE_primitives = 51, RULE_defined_constants = 52, RULE_variable_or_function = 53, 
		RULE_operator = 54, RULE_assignment_operator = 55;
	public static readonly string[] ruleNames = {
		"init", "universal_statement", "using_statement", "namespace_statement", 
		"extern_function_property", "extern_function_definition", "function_property", 
		"function_definition", "constructor_definition", "operator_definition", 
		"attribute", "enum_definition", "enum_entry", "union_definition", "struct_definition", 
		"interface_definition", "implementation_definition", "implementation_entry", 
		"cast_definition", "typedef_definition", "struct_entry", "struct_entry_property", 
		"code_body", "code_statement", "loop", "while_loop", "do_while_loop", 
		"for_loop", "break_statement", "if_statement", "switch_case", "switch_rule", 
		"function_call", "constructor_with_initializers", "initializer_value", 
		"return_value", "type_implements_extended", "type_implements_extended_expression", 
		"type_implements", "generic_definition", "generic_specifier", "expression", 
		"primary_expression", "unary_expression", "access_modifier", "variable_assignment", 
		"variable_declaration", "label", "variable_arguments", "variable_parameter", 
		"variable_type", "primitives", "defined_constants", "variable_or_function", 
		"operator", "assignment_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'.*'", "';'", "'('", "')'", "'{'", "'}'", "'['", "','", 
		"']'", "':'", "'?'", "'...'", "'This'", "'string'", "'bool'", "'f16'", 
		"'f32'", "'f64'", "'f80'", "'f128'", "'varlen'", "'object'", "'void'", 
		"'func'", "'event'", "'char'", "'wchar'", "'var'", "'unsigned'", "'signed'", 
		"'floating'", "'fixed'", "'true'", "'false'", "'null'", "'as'", "'async'", 
		"'atomic'", "'await'", "'break'", "'case'", "'const'", "'default'", "'do'", 
		"'else if'", "'else'", "'enum'", "'explicitcast'", "'extern'", "'for'", 
		"'fn'", "'get'", "'if'", "'impl'", "'implicitcast'", "'in'", "'inline'", 
		"'interface'", "'internal'", "'is'", "'loop'", "'namespace'", "'new'", 
		"'operator'", null, null, null, "'return'", "'set'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'typeof'", "'unsafe'", "'union'", 
		"'using'", "'volatile'", "'while'", "'='", "'+='", "'-='", "'**='", "'*='", 
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'??='", "'+'", 
		"'&'", "'&&'", "'|'", "'/'", "'=='", "'>='", "'>'", "'=>'", "'<='", "'<<'", 
		"'<'", "'^'", "'--'", "'%'", "'*'", "'!='", "'!'", "'??'", "'||'", "'++'", 
		"'..'", "'@'", "'->'", "'>>'", "'-'", "'~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "AS", "ASYNC", "ATOMIC", "AWAIT", "BREAK", "CASE", "CONST", "DEFAULT", 
		"DO", "ELIF", "ELSE", "ENUM", "EXPLICITCAST", "EXTERN", "FOR", "FUNCTION", 
		"GET", "IF", "IMPL", "IMPLICITCAST", "IN", "INLINE", "INTERFACE", "INTERNAL", 
		"IS", "LOOP", "NAMESPACE", "NEW", "OPERATOR", "PRIVATE", "PROTECTED", 
		"PUBLIC", "RETURN", "SET", "SIZEOF", "STATIC", "STRUCT", "SWITCH", "TYPEDEF", 
		"TYPEOF", "UNSAFE", "UNION", "USING", "VOLATILE", "WHILE", "ASSIGN_OP_EQ", 
		"ASSIGN_OP_ADD_EQ", "ASSIGN_OP_SUB_EQ", "ASSIGN_OP_EXP_EQ", "ASSIGN_OP_MUL_EQ", 
		"ASSIGN_OP_DIV_EQ", "ASSIGN_OP_MOD_EQ", "ASSIGN_OP_AND_EQ", "ASSIGN_OP_OR_EQ", 
		"ASSIGN_OP_XOR_EQ", "ASSIGN_OP_LSHIFT_EQ", "ASSIGN_OP_RSHIFT_EQ", "ASSIGN_OP_CHECK_NULL", 
		"OP_ADD", "OP_ADDRESS_OF", "OP_AND", "OP_BITWISE_OR", "OP_DIV", "OP_EQ", 
		"OP_GE", "OP_GT", "OP_LAMBDA", "OP_LE", "OP_LSHIFT", "OP_LT", "OP_MEMBER_ACCESS", 
		"OP_MINUS_MINUS", "OP_MOD", "OP_MUL", "OP_NE", "OP_NOT", "OP_NULL_CHECK", 
		"OP_OR", "OP_PLUS_PLUS", "OP_RANGE", "OP_REFERENCE_POINTER", "OP_RET", 
		"OP_RSHIFT", "OP_SUB", "OP_TILDE", "UNSIGNED", "SIGNED", "FIXED", "INTEGER", 
		"IDENTIFIER", "ESCAPE_SEQUENCE", "STRING", "LINE_COMMENT", "COMMENT", 
		"WHITESPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Asylum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AsylumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AsylumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AsylumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Universal_statementContext[] universal_statement() {
			return GetRuleContexts<Universal_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Universal_statementContext universal_statement(int i) {
			return GetRuleContext<Universal_statementContext>(i);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 0, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << ASYNC) | (1L << ENUM) | (1L << EXTERN) | (1L << FUNCTION) | (1L << IMPL) | (1L << INLINE) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (PUBLIC - 66)) | (1L << (STATIC - 66)) | (1L << (STRUCT - 66)) | (1L << (TYPEDEF - 66)) | (1L << (UNSAFE - 66)) | (1L << (USING - 66)))) != 0)) {
				{
				{
				State = 112;
				universal_statement();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Universal_statementContext : ParserRuleContext {
		public Universal_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universal_statement; } }
	 
		public Universal_statementContext() { }
		public virtual void CopyFrom(Universal_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniversalFunctionContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public UniversalFunctionContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalStructContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public UniversalStructContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalUsingContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Using_statementContext using_statement() {
			return GetRuleContext<Using_statementContext>(0);
		}
		public UniversalUsingContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalNamespaceContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_statementContext namespace_statement() {
			return GetRuleContext<Namespace_statementContext>(0);
		}
		public UniversalNamespaceContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalEnumContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public UniversalEnumContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalInterfaceContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public UniversalInterfaceContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalInterface(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalExternFunctionContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extern_function_definitionContext extern_function_definition() {
			return GetRuleContext<Extern_function_definitionContext>(0);
		}
		public UniversalExternFunctionContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalExternFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalExternFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalExternFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalTypedefContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Typedef_definitionContext typedef_definition() {
			return GetRuleContext<Typedef_definitionContext>(0);
		}
		public UniversalTypedefContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalTypedef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalTypedef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalTypedef(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalImplementationContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Implementation_definitionContext implementation_definition() {
			return GetRuleContext<Implementation_definitionContext>(0);
		}
		public UniversalImplementationContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalImplementation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalImplementation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalImplementation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniversalUnionContext : Universal_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Union_definitionContext union_definition() {
			return GetRuleContext<Union_definitionContext>(0);
		}
		public UniversalUnionContext(Universal_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUniversalUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUniversalUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversalUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Universal_statementContext universal_statement() {
		Universal_statementContext _localctx = new Universal_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_universal_statement);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new UniversalUsingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				using_statement();
				}
				break;
			case 2:
				_localctx = new UniversalNamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				namespace_statement();
				}
				break;
			case 3:
				_localctx = new UniversalExternFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				extern_function_definition();
				}
				break;
			case 4:
				_localctx = new UniversalFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				function_definition();
				}
				break;
			case 5:
				_localctx = new UniversalEnumContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 122;
				enum_definition();
				}
				break;
			case 6:
				_localctx = new UniversalUnionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 123;
				union_definition();
				}
				break;
			case 7:
				_localctx = new UniversalStructContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 124;
				struct_definition();
				}
				break;
			case 8:
				_localctx = new UniversalInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 125;
				interface_definition();
				}
				break;
			case 9:
				_localctx = new UniversalImplementationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 126;
				implementation_definition();
				}
				break;
			case 10:
				_localctx = new UniversalTypedefContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 127;
				typedef_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(AsylumParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AsylumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AsylumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(AsylumParser.STATIC, 0); }
		public Using_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUsing_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUsing_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_statementContext using_statement() {
		Using_statementContext _localctx = new Using_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_using_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(USING);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 131;
				Match(STATIC);
				}
			}

			State = 134;
			Match(IDENTIFIER);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 135;
				Match(T__0);
				State = 136;
				Match(IDENTIFIER);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 142;
				Match(T__1);
				}
			}

			State = 145;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(AsylumParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AsylumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AsylumParser.IDENTIFIER, i);
		}
		public Namespace_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterNamespace_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitNamespace_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_statementContext namespace_statement() {
		Namespace_statementContext _localctx = new Namespace_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(NAMESPACE);
			State = 148;
			Match(IDENTIFIER);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 149;
				Match(T__0);
				State = 150;
				Match(IDENTIFIER);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_function_propertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(AsylumParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(AsylumParser.ASYNC, 0); }
		public Extern_function_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_function_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExtern_function_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExtern_function_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_function_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_function_propertyContext extern_function_property() {
		Extern_function_propertyContext _localctx = new Extern_function_propertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_extern_function_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !(_la==ASYNC || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(AsylumParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AsylumParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_argumentsContext variable_arguments() {
			return GetRuleContext<Variable_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extern_function_propertyContext[] extern_function_property() {
			return GetRuleContexts<Extern_function_propertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extern_function_propertyContext extern_function_property(int i) {
			return GetRuleContext<Extern_function_propertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RET() { return GetToken(AsylumParser.OP_RET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public Extern_function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExtern_function_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExtern_function_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_function_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_function_definitionContext extern_function_definition() {
		Extern_function_definitionContext _localctx = new Extern_function_definitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_extern_function_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 160;
				attribute();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 166;
			Match(EXTERN);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 167;
				access_modifier();
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ASYNC || _la==STATIC) {
				{
				{
				State = 170;
				extern_function_property();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			Match(FUNCTION);
			State = 177;
			Match(IDENTIFIER);
			State = 178;
			Match(T__3);
			State = 179;
			variable_arguments();
			State = 180;
			Match(T__4);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_RET) {
				{
				State = 181;
				Match(OP_RET);
				State = 182;
				variable_type(0);
				}
			}

			State = 185;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_propertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(AsylumParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(AsylumParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(AsylumParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(AsylumParser.UNSAFE, 0); }
		public Function_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterFunction_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitFunction_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_propertyContext function_property() {
		Function_propertyContext _localctx = new Function_propertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (ASYNC - 38)) | (1L << (INLINE - 38)) | (1L << (STATIC - 38)) | (1L << (UNSAFE - 38)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(AsylumParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_argumentsContext variable_arguments() {
			return GetRuleContext<Variable_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_propertyContext[] function_property() {
			return GetRuleContexts<Function_propertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_propertyContext function_property(int i) {
			return GetRuleContext<Function_propertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_definitionContext generic_definition() {
			return GetRuleContext<Generic_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RET() { return GetToken(AsylumParser.OP_RET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 189;
				attribute();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 195;
				access_modifier();
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (ASYNC - 38)) | (1L << (INLINE - 38)) | (1L << (STATIC - 38)) | (1L << (UNSAFE - 38)))) != 0)) {
				{
				{
				State = 198;
				function_property();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(FUNCTION);
			State = 205;
			Match(IDENTIFIER);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LT) {
				{
				State = 206;
				generic_definition();
				}
			}

			State = 209;
			Match(T__3);
			State = 210;
			variable_arguments();
			State = 211;
			Match(T__4);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_RET) {
				{
				State = 212;
				Match(OP_RET);
				State = 213;
				variable_type(0);
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case OP_LAMBDA:
				{
				State = 228;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP_LAMBDA:
					{
					State = 216;
					Match(OP_LAMBDA);
					State = 217;
					expression(0);
					State = 218;
					Match(T__2);
					}
					break;
				case T__5:
					{
					State = 220;
					Match(T__5);
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
						{
						{
						State = 221;
						code_statement();
						}
						}
						State = 226;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 227;
					Match(T__6);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__2:
				{
				State = 230;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_argumentsContext variable_arguments() {
			return GetRuleContext<Variable_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_propertyContext[] function_property() {
			return GetRuleContexts<Function_propertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_propertyContext function_property(int i) {
			return GetRuleContext<Function_propertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_definitionContext generic_definition() {
			return GetRuleContext<Generic_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public Constructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterConstructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitConstructor_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_definitionContext constructor_definition() {
		Constructor_definitionContext _localctx = new Constructor_definitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_constructor_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 233;
				attribute();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 239;
				access_modifier();
				}
			}

			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 242;
					function_property();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 248;
			variable_type(0);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LT) {
				{
				State = 249;
				generic_definition();
				}
			}

			State = 252;
			Match(T__3);
			State = 253;
			variable_arguments();
			State = 254;
			Match(T__4);
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case OP_LAMBDA:
				{
				State = 267;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP_LAMBDA:
					{
					State = 255;
					Match(OP_LAMBDA);
					State = 256;
					expression(0);
					State = 257;
					Match(T__2);
					}
					break;
				case T__5:
					{
					State = 259;
					Match(T__5);
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
						{
						{
						State = 260;
						code_statement();
						}
						}
						State = 265;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 266;
					Match(T__6);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__2:
				{
				State = 269;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(AsylumParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_argumentsContext variable_arguments() {
			return GetRuleContext<Variable_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(AsylumParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RET() { return GetToken(AsylumParser.OP_RET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public Operator_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterOperator_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitOperator_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_definitionContext operator_definition() {
		Operator_definitionContext _localctx = new Operator_definitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_operator_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 272;
				attribute();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INLINE) {
				{
				State = 278;
				Match(INLINE);
				}
			}

			State = 281;
			Match(OPERATOR);
			State = 282;
			@operator();
			State = 283;
			Match(T__3);
			State = 284;
			variable_arguments();
			State = 285;
			Match(T__4);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_RET) {
				{
				State = 286;
				Match(OP_RET);
				State = 287;
				variable_type(0);
				}
			}

			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case OP_LAMBDA:
				{
				State = 302;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP_LAMBDA:
					{
					State = 290;
					Match(OP_LAMBDA);
					State = 291;
					expression(0);
					State = 292;
					Match(T__2);
					}
					break;
				case T__5:
					{
					State = 294;
					Match(T__5);
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
						{
						{
						State = 295;
						code_statement();
						}
						}
						State = 300;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 301;
					Match(T__6);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__2:
				{
				State = 304;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 20, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__7);
			State = 308;
			Match(IDENTIFIER);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 309;
				Match(T__3);
				State = 310;
				expression(0);
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 311;
					Match(T__8);
					State = 312;
					expression(0);
					}
					}
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 318;
				Match(T__4);
				}
			}

			State = 322;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(AsylumParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AsylumParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_entryContext[] enum_entry() {
			return GetRuleContexts<Enum_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_entryContext enum_entry(int i) {
			return GetRuleContext<Enum_entryContext>(i);
		}
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 324;
				attribute();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 330;
				access_modifier();
				}
			}

			State = 333;
			Match(ENUM);
			State = 334;
			Match(IDENTIFIER);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 335;
				Match(T__10);
				State = 336;
				Match(INTEGER);
				}
			}

			State = 339;
			Match(T__5);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 340;
				enum_entry();
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 341;
					Match(T__8);
					State = 342;
					enum_entry();
					}
					}
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 350;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_entryContext : ParserRuleContext {
		public Enum_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_entry; } }
	 
		public Enum_entryContext() { }
		public virtual void CopyFrom(Enum_entryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumEntryPlainContext : Enum_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AsylumParser.INTEGER, 0); }
		public EnumEntryPlainContext(Enum_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterEnumEntryPlain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitEnumEntryPlain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntryPlain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumEntryDataContext : Enum_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AsylumParser.INTEGER, 0); }
		public EnumEntryDataContext(Enum_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterEnumEntryData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitEnumEntryData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntryData(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumEntryStructsContext : Enum_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext[] variable_parameter() {
			return GetRuleContexts<Variable_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter(int i) {
			return GetRuleContext<Variable_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AsylumParser.INTEGER, 0); }
		public EnumEntryStructsContext(Enum_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterEnumEntryStructs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitEnumEntryStructs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumEntryStructs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_entryContext enum_entry() {
		Enum_entryContext _localctx = new Enum_entryContext(Context, State);
		EnterRule(_localctx, 24, RULE_enum_entry);
		int _la;
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				_localctx = new EnumEntryPlainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				Match(IDENTIFIER);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN_OP_EQ) {
					{
					State = 353;
					Match(ASSIGN_OP_EQ);
					State = 354;
					Match(INTEGER);
					}
				}

				}
				break;
			case 2:
				_localctx = new EnumEntryDataContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				Match(IDENTIFIER);
				State = 358;
				Match(T__3);
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STATIC - 72)) | (1L << (UNSAFE - 72)) | (1L << (VOLATILE - 72)) | (1L << (UNSIGNED - 72)) | (1L << (SIGNED - 72)) | (1L << (FIXED - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 359;
					variable_type(0);
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__8) {
						{
						{
						State = 360;
						Match(T__8);
						State = 361;
						variable_type(0);
						}
						}
						State = 366;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 369;
				Match(T__4);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN_OP_EQ) {
					{
					State = 370;
					Match(ASSIGN_OP_EQ);
					State = 371;
					Match(INTEGER);
					}
				}

				}
				break;
			case 3:
				_localctx = new EnumEntryStructsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				Match(IDENTIFIER);
				State = 375;
				Match(T__5);
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STATIC - 72)) | (1L << (UNSAFE - 72)) | (1L << (VOLATILE - 72)) | (1L << (UNSIGNED - 72)) | (1L << (SIGNED - 72)) | (1L << (FIXED - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 376;
					variable_parameter();
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__8) {
						{
						{
						State = 377;
						Match(T__8);
						State = 378;
						variable_parameter();
						}
						}
						State = 383;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 386;
				Match(T__6);
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN_OP_EQ) {
					{
					State = 387;
					Match(ASSIGN_OP_EQ);
					State = 388;
					Match(INTEGER);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(AsylumParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(AsylumParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext[] variable_parameter() {
			return GetRuleContexts<Variable_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter(int i) {
			return GetRuleContext<Variable_parameterContext>(i);
		}
		public Union_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUnion_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUnion_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Union_definitionContext union_definition() {
		Union_definitionContext _localctx = new Union_definitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_union_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 393;
				attribute();
				}
				}
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 399;
			Match(UNSAFE);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 400;
				access_modifier();
				}
			}

			State = 403;
			Match(UNION);
			State = 404;
			Match(IDENTIFIER);
			State = 405;
			Match(T__5);
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 406;
				variable_parameter();
				State = 407;
				Match(T__2);
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STATIC - 72)) | (1L << (UNSAFE - 72)) | (1L << (VOLATILE - 72)) | (1L << (UNSIGNED - 72)) | (1L << (SIGNED - 72)) | (1L << (FIXED - 72)) | (1L << (IDENTIFIER - 72)))) != 0) );
			State = 413;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(AsylumParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_definitionContext generic_definition() {
			return GetRuleContext<Generic_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_implementsContext type_implements() {
			return GetRuleContext<Type_implementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_entryContext[] struct_entry() {
			return GetRuleContexts<Struct_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_entryContext struct_entry(int i) {
			return GetRuleContext<Struct_entryContext>(i);
		}
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 415;
				attribute();
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 421;
				access_modifier();
				}
			}

			State = 424;
			Match(STRUCT);
			State = 425;
			Match(IDENTIFIER);
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LT) {
				{
				State = 426;
				generic_definition();
				}
			}

			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 429;
				type_implements();
				}
			}

			State = 441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				{
				State = 432;
				Match(T__5);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST) | (1L << INTERNAL))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (PUBLIC - 66)) | (1L << (STATIC - 66)) | (1L << (UNSAFE - 66)) | (1L << (VOLATILE - 66)) | (1L << (UNSIGNED - 66)) | (1L << (SIGNED - 66)) | (1L << (FIXED - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
					{
					{
					State = 433;
					struct_entry();
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 439;
				Match(T__6);
				}
				break;
			case T__2:
				{
				State = 440;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(AsylumParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_definitionContext generic_definition() {
			return GetRuleContext<Generic_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_implementsContext type_implements() {
			return GetRuleContext<Type_implementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_entryContext[] struct_entry() {
			return GetRuleContexts<Struct_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_entryContext struct_entry(int i) {
			return GetRuleContext<Struct_entryContext>(i);
		}
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 443;
				attribute();
				}
				}
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
				{
				State = 449;
				access_modifier();
				}
			}

			State = 452;
			Match(INTERFACE);
			State = 453;
			Match(IDENTIFIER);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LT) {
				{
				State = 454;
				generic_definition();
				}
			}

			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 457;
				type_implements();
				}
			}

			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				{
				State = 460;
				Match(T__5);
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST) | (1L << INTERNAL))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (PRIVATE - 66)) | (1L << (PROTECTED - 66)) | (1L << (PUBLIC - 66)) | (1L << (STATIC - 66)) | (1L << (UNSAFE - 66)) | (1L << (VOLATILE - 66)) | (1L << (UNSIGNED - 66)) | (1L << (SIGNED - 66)) | (1L << (FIXED - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
					{
					{
					State = 461;
					struct_entry();
					}
					}
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 467;
				Match(T__6);
				}
				break;
			case T__2:
				{
				State = 468;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implementation_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPL() { return GetToken(AsylumParser.IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function() {
			return GetRuleContext<Variable_or_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AsylumParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_definitionContext generic_definition() {
			return GetRuleContext<Generic_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implementation_entryContext[] implementation_entry() {
			return GetRuleContexts<Implementation_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implementation_entryContext implementation_entry(int i) {
			return GetRuleContext<Implementation_entryContext>(i);
		}
		public Implementation_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterImplementation_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitImplementation_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implementation_definitionContext implementation_definition() {
		Implementation_definitionContext _localctx = new Implementation_definitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_implementation_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(IMPL);
			State = 472;
			variable_or_function();
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 473;
				Match(FOR);
				State = 474;
				variable_type(0);
				}
			}

			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LT) {
				{
				State = 477;
				generic_definition();
				}
			}

			State = 480;
			Match(T__5);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__7) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ASYNC) | (1L << ATOMIC) | (1L << CONST) | (1L << EXPLICITCAST) | (1L << FUNCTION) | (1L << IMPLICITCAST) | (1L << INLINE) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OPERATOR - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VOLATILE - 65)) | (1L << (UNSIGNED - 65)) | (1L << (SIGNED - 65)) | (1L << (FIXED - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 481;
				implementation_entry();
				}
				}
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 487;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implementation_entryContext : ParserRuleContext {
		public Implementation_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation_entry; } }
	 
		public Implementation_entryContext() { }
		public virtual void CopyFrom(Implementation_entryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ImplementationEntryConstructorContext : Implementation_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_definitionContext constructor_definition() {
			return GetRuleContext<Constructor_definitionContext>(0);
		}
		public ImplementationEntryConstructorContext(Implementation_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterImplementationEntryConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitImplementationEntryConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementationEntryConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplementationEntryOperatorContext : Implementation_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_definitionContext operator_definition() {
			return GetRuleContext<Operator_definitionContext>(0);
		}
		public ImplementationEntryOperatorContext(Implementation_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterImplementationEntryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitImplementationEntryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementationEntryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplementationEntryCastContext : Implementation_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cast_definitionContext cast_definition() {
			return GetRuleContext<Cast_definitionContext>(0);
		}
		public ImplementationEntryCastContext(Implementation_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterImplementationEntryCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitImplementationEntryCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementationEntryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ImplementationEntryFunctionContext : Implementation_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public ImplementationEntryFunctionContext(Implementation_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterImplementationEntryFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitImplementationEntryFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementationEntryFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implementation_entryContext implementation_entry() {
		Implementation_entryContext _localctx = new Implementation_entryContext(Context, State);
		EnterRule(_localctx, 34, RULE_implementation_entry);
		try {
			State = 493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				_localctx = new ImplementationEntryFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				function_definition();
				}
				break;
			case 2:
				_localctx = new ImplementationEntryConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				constructor_definition();
				}
				break;
			case 3:
				_localctx = new ImplementationEntryOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 491;
				operator_definition();
				}
				break;
			case 4:
				_localctx = new ImplementationEntryCastContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 492;
				cast_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter() {
			return GetRuleContext<Variable_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RET() { return GetToken(AsylumParser.OP_RET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICITCAST() { return GetToken(AsylumParser.IMPLICITCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLICITCAST() { return GetToken(AsylumParser.EXPLICITCAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE() { return GetToken(AsylumParser.INLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public Cast_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterCast_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitCast_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_definitionContext cast_definition() {
		Cast_definitionContext _localctx = new Cast_definitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_cast_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 495;
				attribute();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INLINE) {
				{
				State = 501;
				Match(INLINE);
				}
			}

			State = 504;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPLICITCAST || _la==IMPLICITCAST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 505;
			Match(T__3);
			State = 506;
			variable_parameter();
			State = 507;
			Match(T__4);
			State = 508;
			Match(OP_RET);
			State = 509;
			variable_type(0);
			State = 522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				{
				State = 510;
				Match(T__5);
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
					{
					{
					State = 511;
					code_statement();
					}
					}
					State = 516;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 517;
				Match(T__6);
				}
				break;
			case OP_LAMBDA:
				{
				State = 518;
				Match(OP_LAMBDA);
				State = 519;
				expression(0);
				State = 520;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typedef_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEDEF() { return GetToken(AsylumParser.TYPEDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		public Typedef_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterTypedef_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitTypedef_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedef_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typedef_definitionContext typedef_definition() {
		Typedef_definitionContext _localctx = new Typedef_definitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_typedef_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(TYPEDEF);
			State = 525;
			variable_type(0);
			State = 526;
			Match(IDENTIFIER);
			State = 527;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_entryContext : ParserRuleContext {
		public Struct_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_entry; } }
	 
		public Struct_entryContext() { }
		public virtual void CopyFrom(Struct_entryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructAccessContext : Struct_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		public StructAccessContext(Struct_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterStructAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitStructAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructDataContext : Struct_entryContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter() {
			return GetRuleContext<Variable_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_entry_propertyContext struct_entry_property() {
			return GetRuleContext<Struct_entry_propertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		public StructDataContext(Struct_entryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterStructData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitStructData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_entryContext struct_entry() {
		Struct_entryContext _localctx = new Struct_entryContext(Context, State);
		EnterRule(_localctx, 40, RULE_struct_entry);
		int _la;
		try {
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				_localctx = new StructDataContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
					{
					State = 529;
					access_modifier();
					}
				}

				State = 532;
				variable_parameter();
				State = 535;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 533;
					Match(T__2);
					}
					break;
				case T__5:
				case OP_LAMBDA:
					{
					State = 534;
					struct_entry_property();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new StructAccessContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 537;
				access_modifier();
				State = 538;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_entry_propertyContext : ParserRuleContext {
		public Struct_entry_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_entry_property; } }
	 
		public Struct_entry_propertyContext() { }
		public virtual void CopyFrom(Struct_entry_propertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyGetSetContext : Struct_entry_propertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(AsylumParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(AsylumParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_LAMBDA() { return GetTokens(AsylumParser.OP_LAMBDA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA(int i) {
			return GetToken(AsylumParser.OP_LAMBDA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext[] access_modifier() {
			return GetRuleContexts<Access_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_modifierContext access_modifier(int i) {
			return GetRuleContext<Access_modifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public PropertyGetSetContext(Struct_entry_propertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPropertyGetSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPropertyGetSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetSet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetOnlyContext : Struct_entry_propertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertySetOnlyContext(Struct_entry_propertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPropertySetOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPropertySetOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetOnly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_entry_propertyContext struct_entry_property() {
		Struct_entry_propertyContext _localctx = new Struct_entry_propertyContext(Context, State);
		EnterRule(_localctx, 42, RULE_struct_entry_property);
		int _la;
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				_localctx = new PropertyGetSetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 542;
				Match(T__5);
				State = 562;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
						{
						State = 543;
						access_modifier();
						}
					}

					State = 546;
					Match(GET);
					State = 560;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__2:
						{
						State = 547;
						Match(T__2);
						}
						break;
					case T__5:
						{
						State = 548;
						Match(T__5);
						State = 552;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
							{
							{
							State = 549;
							code_statement();
							}
							}
							State = 554;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 555;
						Match(T__6);
						}
						break;
					case OP_LAMBDA:
						{
						State = 556;
						Match(OP_LAMBDA);
						State = 557;
						expression(0);
						State = 558;
						Match(T__2);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)) | (1L << (SET - 60)))) != 0)) {
					{
					State = 565;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (INTERNAL - 60)) | (1L << (PRIVATE - 60)) | (1L << (PROTECTED - 60)) | (1L << (PUBLIC - 60)))) != 0)) {
						{
						State = 564;
						access_modifier();
						}
					}

					State = 567;
					Match(SET);
					State = 581;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__2:
						{
						State = 568;
						Match(T__2);
						}
						break;
					case T__5:
						{
						State = 569;
						Match(T__5);
						State = 573;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
							{
							{
							State = 570;
							code_statement();
							}
							}
							State = 575;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 576;
						Match(T__6);
						}
						break;
					case OP_LAMBDA:
						{
						State = 577;
						Match(OP_LAMBDA);
						State = 578;
						expression(0);
						State = 579;
						Match(T__2);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 585;
				Match(T__6);
				}
				break;
			case OP_LAMBDA:
				_localctx = new PropertySetOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				Match(OP_LAMBDA);
				State = 587;
				expression(0);
				State = 588;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public Code_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterCode_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitCode_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_bodyContext code_body() {
		Code_bodyContext _localctx = new Code_bodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_code_body);
		int _la;
		try {
			State = 601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592;
				Match(T__5);
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
					{
					{
					State = 593;
					code_statement();
					}
					}
					State = 598;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 599;
				Match(T__6);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 600;
				code_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_statementContext : ParserRuleContext {
		public Code_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_statement; } }
	 
		public Code_statementContext() { }
		public virtual void CopyFrom(Code_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstructorStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_with_initializersContext constructor_with_initializers() {
			return GetRuleContext<Constructor_with_initializersContext>(0);
		}
		public ConstructorStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterConstructorStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitConstructorStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileLoopStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public While_loopContext while_loop() {
			return GetRuleContext<While_loopContext>(0);
		}
		public WhileLoopStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterWhileLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitWhileLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForLoopStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		public ForLoopStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterForLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitForLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignmentContext variable_assignment() {
			return GetRuleContext<Variable_assignmentContext>(0);
		}
		public VariableAssignmentStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public LoopStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public BreakStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public IfStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchCaseStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Switch_caseContext switch_case() {
			return GetRuleContext<Switch_caseContext>(0);
		}
		public SwitchCaseStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndentedStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(AsylumParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public IndentedStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterIndentedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitIndentedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndentedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public FunctionCallStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_valueContext return_value() {
			return GetRuleContext<Return_valueContext>(0);
		}
		public ReturnStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public VariableDeclarationStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileLoopStatementContext : Code_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_loopContext do_while_loop() {
			return GetRuleContext<Do_while_loopContext>(0);
		}
		public DoWhileLoopStatementContext(Code_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterDoWhileLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitDoWhileLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_statementContext code_statement() {
		Code_statementContext _localctx = new Code_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_code_statement);
		int _la;
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				_localctx = new FunctionCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 603;
				function_call();
				State = 604;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new ConstructorStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				constructor_with_initializers();
				State = 607;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 609;
				variable_declaration();
				State = 610;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new VariableAssignmentStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 612;
				variable_assignment();
				State = 613;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 615;
				loop();
				}
				break;
			case 6:
				_localctx = new WhileLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 616;
				while_loop();
				}
				break;
			case 7:
				_localctx = new DoWhileLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 617;
				do_while_loop();
				}
				break;
			case 8:
				_localctx = new ForLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 618;
				for_loop();
				}
				break;
			case 9:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 619;
				break_statement();
				}
				break;
			case 10:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 620;
				if_statement();
				}
				break;
			case 11:
				_localctx = new SwitchCaseStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 621;
				switch_case();
				}
				break;
			case 12:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 622;
				expression(0);
				State = 623;
				Match(T__2);
				}
				break;
			case 13:
				_localctx = new IndentedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 625;
					Match(UNSAFE);
					}
				}

				State = 628;
				Match(T__5);
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
					{
					{
					State = 629;
					code_statement();
					}
					}
					State = 634;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 635;
				Match(T__6);
				}
				break;
			case 14:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 636;
				return_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(AsylumParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body() {
			return GetRuleContext<Code_bodyContext>(0);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 48, RULE_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(LOOP);
			State = 640;
			code_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AsylumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body() {
			return GetRuleContext<Code_bodyContext>(0);
		}
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 50, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(WHILE);
			State = 643;
			Match(T__3);
			State = 644;
			expression(0);
			State = 645;
			Match(T__4);
			State = 646;
			code_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(AsylumParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body() {
			return GetRuleContext<Code_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AsylumParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterDo_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitDo_while_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_loopContext do_while_loop() {
		Do_while_loopContext _localctx = new Do_while_loopContext(Context, State);
		EnterRule(_localctx, 52, RULE_do_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			Match(DO);
			State = 649;
			code_body();
			State = 650;
			Match(WHILE);
			State = 651;
			expression(0);
			State = 652;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
	 
		public For_loopContext() { }
		public virtual void CopyFrom(For_loopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TraditionalForLoopContext : For_loopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AsylumParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body() {
			return GetRuleContext<Code_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignmentContext variable_assignment() {
			return GetRuleContext<Variable_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public TraditionalForLoopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterTraditionalForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitTraditionalForLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraditionalForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLoopContext : For_loopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(AsylumParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(AsylumParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body() {
			return GetRuleContext<Code_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter() {
			return GetRuleContext<Variable_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		public ForEachLoopContext(For_loopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterForEachLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitForEachLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 54, RULE_for_loop);
		try {
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				_localctx = new TraditionalForLoopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 654;
				Match(FOR);
				State = 655;
				Match(T__3);
				State = 658;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 656;
					variable_assignment();
					}
					break;
				case 2:
					{
					State = 657;
					variable_declaration();
					}
					break;
				}
				State = 660;
				Match(T__2);
				State = 661;
				expression(0);
				State = 662;
				Match(T__2);
				State = 663;
				expression(0);
				State = 664;
				Match(T__4);
				State = 665;
				code_body();
				}
				break;
			case 2:
				_localctx = new ForEachLoopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 667;
				Match(FOR);
				State = 668;
				Match(T__3);
				State = 671;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 669;
					variable_parameter();
					}
					break;
				case 2:
					{
					State = 670;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 673;
				Match(IN);
				State = 674;
				expression(0);
				State = 675;
				Match(T__4);
				State = 676;
				code_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AsylumParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AsylumParser.INTEGER, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_break_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			Match(BREAK);
			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER) {
				{
				State = 681;
				Match(INTEGER);
				}
			}

			State = 684;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AsylumParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext[] code_body() {
			return GetRuleContexts<Code_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_bodyContext code_body(int i) {
			return GetRuleContext<Code_bodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(AsylumParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(AsylumParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(AsylumParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AsylumParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_if_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONST) {
				{
				State = 686;
				Match(CONST);
				}
			}

			State = 689;
			Match(IF);
			State = 690;
			expression(0);
			State = 691;
			code_body();
			State = 698;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 692;
					Match(ELIF);
					State = 693;
					expression(0);
					State = 694;
					code_body();
					}
					} 
				}
				State = 700;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			}
			State = 703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 701;
				Match(ELSE);
				State = 702;
				code_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(AsylumParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function() {
			return GetRuleContext<Variable_or_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_ruleContext[] switch_rule() {
			return GetRuleContexts<Switch_ruleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_ruleContext switch_rule(int i) {
			return GetRuleContext<Switch_ruleContext>(i);
		}
		public Switch_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterSwitch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitSwitch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_caseContext switch_case() {
		Switch_caseContext _localctx = new Switch_caseContext(Context, State);
		EnterRule(_localctx, 60, RULE_switch_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(SWITCH);
			State = 706;
			Match(T__3);
			State = 707;
			variable_or_function();
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LAMBDA) {
				{
				State = 708;
				Match(OP_LAMBDA);
				State = 709;
				Match(IDENTIFIER);
				}
			}

			State = 712;
			Match(T__4);
			State = 713;
			Match(T__5);
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 714;
				switch_rule();
				}
				}
				State = 717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 719;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_ruleContext : ParserRuleContext {
		public Switch_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_rule; } }
	 
		public Switch_ruleContext() { }
		public virtual void CopyFrom(Switch_ruleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseExpressionContext : Switch_ruleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AsylumParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(AsylumParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(AsylumParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public CaseExpressionContext(Switch_ruleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterCaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitCaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseDefaultContext : Switch_ruleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(AsylumParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AsylumParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public CaseDefaultContext(Switch_ruleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitCaseDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_ruleContext switch_rule() {
		Switch_ruleContext _localctx = new Switch_ruleContext(Context, State);
		EnterRule(_localctx, 62, RULE_switch_rule);
		int _la;
		try {
			int _alt;
			State = 748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				_localctx = new CaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 721;
					Match(CASE);
					State = 722;
					expression(0);
					State = 723;
					Match(T__10);
					}
					}
					State = 727;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CASE );
				State = 732;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 729;
						code_statement();
						}
						} 
					}
					State = 734;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				}
				State = 735;
				Match(BREAK);
				State = 736;
				Match(T__2);
				}
				break;
			case DEFAULT:
				_localctx = new CaseDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 738;
				Match(DEFAULT);
				State = 739;
				Match(T__10);
				State = 743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 740;
						code_statement();
						}
						} 
					}
					State = 745;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
				}
				State = 746;
				Match(BREAK);
				State = 747;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function() {
			return GetRuleContext<Variable_or_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(AsylumParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specifierContext generic_specifier() {
			return GetRuleContext<Generic_specifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 64, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AWAIT) {
				{
				State = 750;
				Match(AWAIT);
				}
			}

			State = 753;
			variable_or_function();
			State = 755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_LT) {
				{
				State = 754;
				generic_specifier();
				}
			}

			State = 757;
			Match(T__3);
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (CONST - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (SIZEOF - 71)) | (1L << (STATIC - 71)) | (1L << (TYPEOF - 71)) | (1L << (UNSAFE - 71)) | (1L << (VOLATILE - 71)) | (1L << (OP_ADD - 71)) | (1L << (OP_ADDRESS_OF - 71)) | (1L << (OP_MEMBER_ACCESS - 71)) | (1L << (OP_MINUS_MINUS - 71)) | (1L << (OP_MUL - 71)) | (1L << (OP_NOT - 71)) | (1L << (OP_PLUS_PLUS - 71)) | (1L << (OP_REFERENCE_POINTER - 71)) | (1L << (OP_SUB - 71)) | (1L << (OP_TILDE - 71)) | (1L << (UNSIGNED - 71)) | (1L << (SIGNED - 71)) | (1L << (FIXED - 71)) | (1L << (INTEGER - 71)) | (1L << (IDENTIFIER - 71)) | (1L << (STRING - 71)))) != 0)) {
				{
				State = 759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 758;
					label();
					}
					break;
				}
				State = 761;
				expression(0);
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 762;
					Match(T__8);
					State = 764;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
					case 1:
						{
						State = 763;
						label();
						}
						break;
					}
					State = 766;
					expression(0);
					}
					}
					State = 771;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 774;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_with_initializersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_valueContext[] initializer_value() {
			return GetRuleContexts<Initializer_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_valueContext initializer_value(int i) {
			return GetRuleContext<Initializer_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Constructor_with_initializersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_with_initializers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterConstructor_with_initializers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitConstructor_with_initializers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_with_initializers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_with_initializersContext constructor_with_initializers() {
		Constructor_with_initializersContext _localctx = new Constructor_with_initializersContext(Context, State);
		EnterRule(_localctx, 66, RULE_constructor_with_initializers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			variable_type(0);
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 777;
				Match(T__3);
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (CONST - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (SIZEOF - 71)) | (1L << (STATIC - 71)) | (1L << (TYPEOF - 71)) | (1L << (UNSAFE - 71)) | (1L << (VOLATILE - 71)) | (1L << (OP_ADD - 71)) | (1L << (OP_ADDRESS_OF - 71)) | (1L << (OP_MEMBER_ACCESS - 71)) | (1L << (OP_MINUS_MINUS - 71)) | (1L << (OP_MUL - 71)) | (1L << (OP_NOT - 71)) | (1L << (OP_PLUS_PLUS - 71)) | (1L << (OP_REFERENCE_POINTER - 71)) | (1L << (OP_SUB - 71)) | (1L << (OP_TILDE - 71)) | (1L << (UNSIGNED - 71)) | (1L << (SIGNED - 71)) | (1L << (FIXED - 71)) | (1L << (INTEGER - 71)) | (1L << (IDENTIFIER - 71)) | (1L << (STRING - 71)))) != 0)) {
					{
					State = 778;
					expression(0);
					State = 783;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__8) {
						{
						{
						State = 779;
						Match(T__8);
						State = 780;
						expression(0);
						}
						}
						State = 785;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 788;
				Match(T__4);
				}
			}

			State = 791;
			Match(T__5);
			State = 800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (CONST - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (SIZEOF - 71)) | (1L << (STATIC - 71)) | (1L << (TYPEOF - 71)) | (1L << (UNSAFE - 71)) | (1L << (VOLATILE - 71)) | (1L << (OP_ADD - 71)) | (1L << (OP_ADDRESS_OF - 71)) | (1L << (OP_MEMBER_ACCESS - 71)) | (1L << (OP_MINUS_MINUS - 71)) | (1L << (OP_MUL - 71)) | (1L << (OP_NOT - 71)) | (1L << (OP_PLUS_PLUS - 71)) | (1L << (OP_REFERENCE_POINTER - 71)) | (1L << (OP_SUB - 71)) | (1L << (OP_TILDE - 71)) | (1L << (UNSIGNED - 71)) | (1L << (SIGNED - 71)) | (1L << (FIXED - 71)) | (1L << (INTEGER - 71)) | (1L << (IDENTIFIER - 71)) | (1L << (STRING - 71)))) != 0)) {
				{
				State = 792;
				initializer_value();
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 793;
					Match(T__8);
					State = 794;
					initializer_value();
					}
					}
					State = 799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 802;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AsylumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AsylumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_initializer_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 804;
				Match(IDENTIFIER);
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 805;
					Match(T__0);
					State = 806;
					Match(IDENTIFIER);
					}
					}
					State = 811;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 812;
				Match(ASSIGN_OP_EQ);
				}
				break;
			}
			State = 815;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AsylumParser.RETURN, 0); }
		public Return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterReturn_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitReturn_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valueContext return_value() {
		Return_valueContext _localctx = new Return_valueContext(Context, State);
		EnterRule(_localctx, 70, RULE_return_value);
		try {
			State = 822;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__5:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case ATOMIC:
			case AWAIT:
			case CONST:
			case NEW:
			case SIZEOF:
			case STATIC:
			case TYPEOF:
			case UNSAFE:
			case VOLATILE:
			case OP_ADD:
			case OP_ADDRESS_OF:
			case OP_MEMBER_ACCESS:
			case OP_MINUS_MINUS:
			case OP_MUL:
			case OP_NOT:
			case OP_PLUS_PLUS:
			case OP_REFERENCE_POINTER:
			case OP_SUB:
			case OP_TILDE:
			case UNSIGNED:
			case SIGNED:
			case FIXED:
			case INTEGER:
			case IDENTIFIER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 817;
				expression(0);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 818;
				Match(RETURN);
				State = 819;
				expression(0);
				State = 820;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_implements_extendedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extended_expressionContext type_implements_extended_expression() {
			return GetRuleContext<Type_implements_extended_expressionContext>(0);
		}
		public Type_implements_extendedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_implements_extended; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterType_implements_extended(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitType_implements_extended(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_implements_extended(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_implements_extendedContext type_implements_extended() {
		Type_implements_extendedContext _localctx = new Type_implements_extendedContext(Context, State);
		EnterRule(_localctx, 72, RULE_type_implements_extended);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			Match(T__10);
			State = 825;
			type_implements_extended_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_implements_extended_expressionContext : ParserRuleContext {
		public Type_implements_extended_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_implements_extended_expression; } }
	 
		public Type_implements_extended_expressionContext() { }
		public virtual void CopyFrom(Type_implements_extended_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeImplementsExprSingleContext : Type_implements_extended_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public TypeImplementsExprSingleContext(Type_implements_extended_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterTypeImplementsExprSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitTypeImplementsExprSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImplementsExprSingle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeImplementsExprAndContext : Type_implements_extended_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extended_expressionContext[] type_implements_extended_expression() {
			return GetRuleContexts<Type_implements_extended_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extended_expressionContext type_implements_extended_expression(int i) {
			return GetRuleContext<Type_implements_extended_expressionContext>(i);
		}
		public TypeImplementsExprAndContext(Type_implements_extended_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterTypeImplementsExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitTypeImplementsExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImplementsExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeImplementsExprOrContext : Type_implements_extended_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extended_expressionContext[] type_implements_extended_expression() {
			return GetRuleContexts<Type_implements_extended_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extended_expressionContext type_implements_extended_expression(int i) {
			return GetRuleContext<Type_implements_extended_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR() { return GetToken(AsylumParser.OP_BITWISE_OR, 0); }
		public TypeImplementsExprOrContext(Type_implements_extended_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterTypeImplementsExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitTypeImplementsExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImplementsExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeImplementsExprParenthesisContext : Type_implements_extended_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extended_expressionContext type_implements_extended_expression() {
			return GetRuleContext<Type_implements_extended_expressionContext>(0);
		}
		public TypeImplementsExprParenthesisContext(Type_implements_extended_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterTypeImplementsExprParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitTypeImplementsExprParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImplementsExprParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_implements_extended_expressionContext type_implements_extended_expression() {
		return type_implements_extended_expression(0);
	}

	private Type_implements_extended_expressionContext type_implements_extended_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Type_implements_extended_expressionContext _localctx = new Type_implements_extended_expressionContext(Context, _parentState);
		Type_implements_extended_expressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_type_implements_extended_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				{
				_localctx = new TypeImplementsExprParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 828;
				Match(T__3);
				State = 829;
				type_implements_extended_expression(0);
				State = 830;
				Match(T__4);
				}
				break;
			case 2:
				{
				_localctx = new TypeImplementsExprSingleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 832;
				variable_type(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 843;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 841;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
					case 1:
						{
						_localctx = new TypeImplementsExprOrContext(new Type_implements_extended_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type_implements_extended_expression);
						State = 835;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 836;
						Match(OP_BITWISE_OR);
						State = 837;
						type_implements_extended_expression(4);
						}
						break;
					case 2:
						{
						_localctx = new TypeImplementsExprAndContext(new Type_implements_extended_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type_implements_extended_expression);
						State = 838;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 839;
						Match(T__8);
						State = 840;
						type_implements_extended_expression(3);
						}
						break;
					}
					} 
				}
				State = 845;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_implementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		public Type_implementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_implements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterType_implements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitType_implements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_implements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_implementsContext type_implements() {
		Type_implementsContext _localctx = new Type_implementsContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_implements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(T__10);
			State = 847;
			variable_type(0);
			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 848;
				Match(T__8);
				State = 849;
				variable_type(0);
				}
				}
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AsylumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AsylumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extendedContext[] type_implements_extended() {
			return GetRuleContexts<Type_implements_extendedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_implements_extendedContext type_implements_extended(int i) {
			return GetRuleContext<Type_implements_extendedContext>(i);
		}
		public Generic_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterGeneric_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitGeneric_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_definitionContext generic_definition() {
		Generic_definitionContext _localctx = new Generic_definitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_generic_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			Match(OP_LT);
			State = 856;
			Match(IDENTIFIER);
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 857;
				type_implements_extended();
				}
			}

			State = 867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 860;
				Match(T__8);
				State = 861;
				Match(IDENTIFIER);
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 862;
					type_implements_extended();
					}
				}

				}
				}
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 870;
			Match(OP_GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		public Generic_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterGeneric_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitGeneric_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_specifierContext generic_specifier() {
		Generic_specifierContext _localctx = new Generic_specifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_generic_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(OP_LT);
			State = 873;
			variable_type(0);
			State = 878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 874;
				Match(T__8);
				State = 875;
				variable_type(0);
				}
				}
				State = 880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 881;
			Match(OP_GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprCodeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(AsylumParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext[] code_statement() {
			return GetRuleContexts<Code_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_statementContext code_statement(int i) {
			return GetRuleContext<Code_statementContext>(i);
		}
		public ExprCodeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprTernaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprTernaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprTernary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprComparisonContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(AsylumParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(AsylumParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(AsylumParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(AsylumParser.AS, 0); }
		public ExprComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStringContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AsylumParser.STRING, 0); }
		public ExprStringContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprNullCheckContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NULL_CHECK() { return GetToken(AsylumParser.OP_NULL_CHECK, 0); }
		public ExprNullCheckContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprNullCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprNullCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprNullCheck(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprShiftContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(AsylumParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(AsylumParser.OP_RSHIFT, 0); }
		public ExprShiftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAdditiveContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(AsylumParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(AsylumParser.OP_SUB, 0); }
		public ExprAdditiveContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprAdditive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprAdditive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBitOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR() { return GetToken(AsylumParser.OP_BITWISE_OR, 0); }
		public ExprBitOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprBitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprBitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprPrimaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public ExprPrimaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(AsylumParser.OP_AND, 0); }
		public ExprAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprEqualityComparisonContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(AsylumParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(AsylumParser.OP_NE, 0); }
		public ExprEqualityComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprEqualityComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprEqualityComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprEqualityComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprXorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MEMBER_ACCESS() { return GetToken(AsylumParser.OP_MEMBER_ACCESS, 0); }
		public ExprXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(AsylumParser.OP_OR, 0); }
		public ExprOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMultiplicativeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(AsylumParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(AsylumParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD() { return GetToken(AsylumParser.OP_MOD, 0); }
		public ExprMultiplicativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprMultiplicative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprMultiplicative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprUnaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ExprUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprBitAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADDRESS_OF() { return GetToken(AsylumParser.OP_ADDRESS_OF, 0); }
		public ExprBitAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprBitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprBitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprBitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprRangeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(AsylumParser.OP_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		public ExprRangeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIntegerContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AsylumParser.INTEGER, 0); }
		public ExprIntegerContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprLambdaContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LAMBDA() { return GetToken(AsylumParser.OP_LAMBDA, 0); }
		public ExprLambdaContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSubprimaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_PLUS() { return GetToken(AsylumParser.OP_PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_MINUS() { return GetToken(AsylumParser.OP_MINUS_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(AsylumParser.OP_NOT, 0); }
		public ExprSubprimaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterExprSubprimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitExprSubprimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSubprimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				_localctx = new ExprParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 884;
				Match(T__3);
				State = 885;
				expression(0);
				State = 886;
				Match(T__4);
				}
				break;
			case 2:
				{
				_localctx = new ExprPrimaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 888;
				primary_expression();
				}
				break;
			case 3:
				{
				_localctx = new ExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 889;
				unary_expression();
				}
				break;
			case 4:
				{
				_localctx = new ExprCodeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 890;
					Match(UNSAFE);
					}
				}

				State = 893;
				Match(T__5);
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (T__3 - 4)) | (1L << (T__5 - 4)) | (1L << (T__13 - 4)) | (1L << (T__14 - 4)) | (1L << (T__15 - 4)) | (1L << (T__16 - 4)) | (1L << (T__17 - 4)) | (1L << (T__18 - 4)) | (1L << (T__19 - 4)) | (1L << (T__20 - 4)) | (1L << (T__21 - 4)) | (1L << (T__22 - 4)) | (1L << (T__23 - 4)) | (1L << (T__24 - 4)) | (1L << (T__25 - 4)) | (1L << (T__26 - 4)) | (1L << (T__27 - 4)) | (1L << (T__28 - 4)) | (1L << (T__29 - 4)) | (1L << (T__30 - 4)) | (1L << (T__31 - 4)) | (1L << (T__32 - 4)) | (1L << (T__33 - 4)) | (1L << (T__34 - 4)) | (1L << (T__35 - 4)) | (1L << (ATOMIC - 4)) | (1L << (AWAIT - 4)) | (1L << (BREAK - 4)) | (1L << (CONST - 4)) | (1L << (DO - 4)) | (1L << (FOR - 4)) | (1L << (IF - 4)) | (1L << (LOOP - 4)) | (1L << (NEW - 4)))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (RETURN - 69)) | (1L << (SIZEOF - 69)) | (1L << (STATIC - 69)) | (1L << (SWITCH - 69)) | (1L << (TYPEOF - 69)) | (1L << (UNSAFE - 69)) | (1L << (VOLATILE - 69)) | (1L << (WHILE - 69)) | (1L << (OP_ADD - 69)) | (1L << (OP_ADDRESS_OF - 69)) | (1L << (OP_MEMBER_ACCESS - 69)) | (1L << (OP_MINUS_MINUS - 69)) | (1L << (OP_MUL - 69)) | (1L << (OP_NOT - 69)) | (1L << (OP_PLUS_PLUS - 69)) | (1L << (OP_REFERENCE_POINTER - 69)) | (1L << (OP_SUB - 69)) | (1L << (OP_TILDE - 69)) | (1L << (UNSIGNED - 69)) | (1L << (SIGNED - 69)) | (1L << (FIXED - 69)) | (1L << (INTEGER - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (STRING - 69)))) != 0)) {
					{
					{
					State = 894;
					code_statement();
					}
					}
					State = 899;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 900;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new ExprIntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 901;
				Match(INTEGER);
				}
				break;
			case 6:
				{
				_localctx = new ExprStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 902;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 955;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
					case 1:
						{
						_localctx = new ExprRangeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 905;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 906;
						Match(OP_RANGE);
						State = 908;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN_OP_EQ) {
							{
							State = 907;
							Match(ASSIGN_OP_EQ);
							}
						}

						State = 910;
						expression(18);
						}
						break;
					case 2:
						{
						_localctx = new ExprMultiplicativeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 911;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 912;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 99)) & ~0x3f) == 0 && ((1L << (_la - 99)) & ((1L << (OP_DIV - 99)) | (1L << (OP_MOD - 99)) | (1L << (OP_MUL - 99)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 913;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new ExprAdditiveContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 914;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 915;
						_la = TokenStream.LA(1);
						if ( !(_la==OP_ADD || _la==OP_SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 916;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new ExprShiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 917;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 918;
						_la = TokenStream.LA(1);
						if ( !(_la==OP_LSHIFT || _la==OP_RSHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 919;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new ExprComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 920;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 921;
						_la = TokenStream.LA(1);
						if ( !(_la==AS || _la==IS || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (OP_GE - 101)) | (1L << (OP_GT - 101)) | (1L << (OP_LE - 101)) | (1L << (OP_LT - 101)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 922;
						expression(14);
						}
						break;
					case 6:
						{
						_localctx = new ExprEqualityComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 923;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 924;
						_la = TokenStream.LA(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 925;
						expression(13);
						}
						break;
					case 7:
						{
						_localctx = new ExprBitAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 926;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 927;
						Match(OP_ADDRESS_OF);
						State = 928;
						expression(12);
						}
						break;
					case 8:
						{
						_localctx = new ExprXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 929;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 930;
						Match(OP_MEMBER_ACCESS);
						State = 931;
						expression(11);
						}
						break;
					case 9:
						{
						_localctx = new ExprBitOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 932;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 933;
						Match(OP_BITWISE_OR);
						State = 934;
						expression(10);
						}
						break;
					case 10:
						{
						_localctx = new ExprAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 935;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 936;
						Match(OP_AND);
						State = 937;
						expression(9);
						}
						break;
					case 11:
						{
						_localctx = new ExprOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 938;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 939;
						Match(OP_OR);
						State = 940;
						expression(8);
						}
						break;
					case 12:
						{
						_localctx = new ExprNullCheckContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 941;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 942;
						Match(OP_NULL_CHECK);
						State = 943;
						expression(7);
						}
						break;
					case 13:
						{
						_localctx = new ExprTernaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 944;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 945;
						Match(T__11);
						State = 946;
						expression(0);
						State = 947;
						Match(T__10);
						State = 948;
						expression(5);
						}
						break;
					case 14:
						{
						_localctx = new ExprLambdaContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 950;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 951;
						Match(OP_LAMBDA);
						State = 952;
						expression(5);
						}
						break;
					case 15:
						{
						_localctx = new ExprSubprimaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 953;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 954;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (OP_MINUS_MINUS - 108)) | (1L << (OP_NOT - 108)) | (1L << (OP_PLUS_PLUS - 108)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function() {
			return GetRuleContext<Variable_or_functionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_with_initializersContext constructor_with_initializers() {
			return GetRuleContext<Constructor_with_initializersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(AsylumParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(AsylumParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZEOF() { return GetToken(AsylumParser.SIZEOF, 0); }
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_primary_expression);
		try {
			State = 981;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				variable_or_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				constructor_with_initializers();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 962;
				function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 963;
				Match(NEW);
				State = 964;
				function_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 965;
				Match(TYPEOF);
				State = 966;
				Match(T__3);
				State = 969;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 967;
					variable_or_function();
					}
					break;
				case 2:
					{
					State = 968;
					variable_type(0);
					}
					break;
				}
				State = 971;
				Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 973;
				Match(SIZEOF);
				State = 974;
				Match(T__3);
				State = 977;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 975;
					variable_or_function();
					}
					break;
				case 2:
					{
					State = 976;
					variable_type(0);
					}
					break;
				}
				State = 979;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(AsylumParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(AsylumParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(AsylumParser.OP_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_TILDE() { return GetToken(AsylumParser.OP_TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_PLUS() { return GetToken(AsylumParser.OP_PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_MINUS() { return GetToken(AsylumParser.OP_MINUS_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MEMBER_ACCESS() { return GetToken(AsylumParser.OP_MEMBER_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADDRESS_OF() { return GetToken(AsylumParser.OP_ADDRESS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REFERENCE_POINTER() { return GetToken(AsylumParser.OP_REFERENCE_POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(AsylumParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defined_constantsContext defined_constants() {
			return GetRuleContext<Defined_constantsContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_unary_expression);
		try {
			State = 1009;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983;
				Match(OP_ADD);
				State = 984;
				expression(0);
				}
				break;
			case OP_SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985;
				Match(OP_SUB);
				State = 986;
				expression(0);
				}
				break;
			case OP_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 987;
				Match(OP_NOT);
				State = 988;
				expression(0);
				}
				break;
			case OP_TILDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 989;
				Match(OP_TILDE);
				State = 990;
				expression(0);
				}
				break;
			case OP_PLUS_PLUS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 991;
				Match(OP_PLUS_PLUS);
				State = 992;
				expression(0);
				}
				break;
			case OP_MINUS_MINUS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 993;
				Match(OP_MINUS_MINUS);
				State = 994;
				expression(0);
				}
				break;
			case OP_MEMBER_ACCESS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 995;
				Match(OP_MEMBER_ACCESS);
				State = 996;
				expression(0);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 8);
				{
				State = 997;
				Match(T__3);
				State = 998;
				variable_type(0);
				State = 999;
				Match(T__4);
				State = 1000;
				expression(0);
				}
				break;
			case OP_ADDRESS_OF:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1002;
				Match(OP_ADDRESS_OF);
				State = 1003;
				expression(0);
				}
				break;
			case OP_REFERENCE_POINTER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1004;
				Match(OP_REFERENCE_POINTER);
				State = 1005;
				expression(0);
				}
				break;
			case OP_MUL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1006;
				Match(OP_MUL);
				State = 1007;
				expression(0);
				}
				break;
			case T__33:
			case T__34:
			case T__35:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1008;
				defined_constants();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(AsylumParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(AsylumParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(AsylumParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(AsylumParser.PRIVATE, 0); }
		public Access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterAccess_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitAccess_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_modifierContext access_modifier() {
		Access_modifierContext _localctx = new Access_modifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_access_modifier);
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1011;
				Match(PUBLIC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1012;
				Match(PROTECTED);
				State = 1013;
				Match(INTERNAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1014;
				Match(PRIVATE);
				State = 1015;
				Match(PROTECTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1016;
				Match(PRIVATE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1017;
				Match(PROTECTED);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1018;
				Match(INTERNAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignmentContext : ParserRuleContext {
		public Variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assignment; } }
	 
		public Variable_assignmentContext() { }
		public virtual void CopyFrom(Variable_assignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentNormalContext : Variable_assignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext[] variable_or_function() {
			return GetRuleContexts<Variable_or_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function(int i) {
			return GetRuleContext<Variable_or_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN_OP_EQ() { return GetTokens(AsylumParser.ASSIGN_OP_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ(int i) {
			return GetToken(AsylumParser.ASSIGN_OP_EQ, i);
		}
		public VariableAssignmentNormalContext(Variable_assignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableAssignmentNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableAssignmentNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignmentNormal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentUnpackContext : Variable_assignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext[] variable_or_function() {
			return GetRuleContexts<Variable_or_functionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function(int i) {
			return GetRuleContext<Variable_or_functionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentUnpackContext(Variable_assignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableAssignmentUnpack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableAssignmentUnpack(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignmentUnpack(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignmentContext variable_assignment() {
		Variable_assignmentContext _localctx = new Variable_assignmentContext(Context, State);
		EnterRule(_localctx, 90, RULE_variable_assignment);
		int _la;
		try {
			int _alt;
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				_localctx = new VariableAssignmentUnpackContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1021;
				variable_or_function();
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1022;
					Match(T__8);
					State = 1023;
					variable_or_function();
					}
					}
					State = 1026;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__8 );
				State = 1028;
				assignment_operator();
				State = 1029;
				expression(0);
				}
				break;
			case 2:
				_localctx = new VariableAssignmentNormalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1031;
				variable_or_function();
				State = 1036;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1032;
						Match(ASSIGN_OP_EQ);
						State = 1033;
						variable_or_function();
						}
						} 
					}
					State = 1038;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
				}
				State = 1039;
				assignment_operator();
				State = 1040;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	 
		public Variable_declarationContext() { }
		public virtual void CopyFrom(Variable_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclareWithTupleInitializerContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext[] variable_parameter() {
			return GetRuleContexts<Variable_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter(int i) {
			return GetRuleContext<Variable_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclareWithTupleInitializerContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableDeclareWithTupleInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableDeclareWithTupleInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclareWithTupleInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclareWithoutInitializerMultipleTypesContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext[] variable_parameter() {
			return GetRuleContexts<Variable_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter(int i) {
			return GetRuleContext<Variable_parameterContext>(i);
		}
		public VariableDeclareWithoutInitializerMultipleTypesContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableDeclareWithoutInitializerMultipleTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableDeclareWithoutInitializerMultipleTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclareWithoutInitializerMultipleTypes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclareWithoutInitializerContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter() {
			return GetRuleContext<Variable_parameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AsylumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AsylumParser.IDENTIFIER, i);
		}
		public VariableDeclareWithoutInitializerContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableDeclareWithoutInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableDeclareWithoutInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclareWithoutInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclareWithInitializerContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext[] variable_parameter() {
			return GetRuleContexts<Variable_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter(int i) {
			return GetRuleContext<Variable_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN_OP_EQ() { return GetTokens(AsylumParser.ASSIGN_OP_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ(int i) {
			return GetToken(AsylumParser.ASSIGN_OP_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclareWithInitializerContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableDeclareWithInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableDeclareWithInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclareWithInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_variable_declaration);
		int _la;
		try {
			int _alt;
			State = 1082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new VariableDeclareWithInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1044;
				variable_parameter();
				State = 1049;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1045;
						Match(ASSIGN_OP_EQ);
						State = 1046;
						variable_parameter();
						}
						} 
					}
					State = 1051;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				}
				State = 1052;
				Match(ASSIGN_OP_EQ);
				State = 1053;
				expression(0);
				}
				break;
			case 2:
				_localctx = new VariableDeclareWithTupleInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1055;
				variable_parameter();
				State = 1060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 1056;
					Match(T__8);
					State = 1057;
					variable_parameter();
					}
					}
					State = 1062;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1063;
				Match(ASSIGN_OP_EQ);
				State = 1064;
				expression(0);
				}
				break;
			case 3:
				_localctx = new VariableDeclareWithoutInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1066;
				variable_parameter();
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 1067;
					Match(T__8);
					State = 1068;
					Match(IDENTIFIER);
					}
					}
					State = 1073;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new VariableDeclareWithoutInitializerMultipleTypesContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1074;
				variable_parameter();
				State = 1079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__8) {
					{
					{
					State = 1075;
					Match(T__8);
					State = 1076;
					variable_parameter();
					}
					}
					State = 1081;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 94, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			Match(IDENTIFIER);
			State = 1085;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_argumentsContext : ParserRuleContext {
		public Variable_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_arguments; } }
	 
		public Variable_argumentsContext() { }
		public virtual void CopyFrom(Variable_argumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableArgsNoneOrSomeContext : Variable_argumentsContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext[] variable_parameter() {
			return GetRuleContexts<Variable_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_parameterContext variable_parameter(int i) {
			return GetRuleContext<Variable_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public VariableArgsNoneOrSomeContext(Variable_argumentsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableArgsNoneOrSome(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableArgsNoneOrSome(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableArgsNoneOrSome(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableArgsVariadicOnlyContext : Variable_argumentsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public VariableArgsVariadicOnlyContext(Variable_argumentsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariableArgsVariadicOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariableArgsVariadicOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableArgsVariadicOnly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_argumentsContext variable_arguments() {
		Variable_argumentsContext _localctx = new Variable_argumentsContext(Context, State);
		EnterRule(_localctx, 96, RULE_variable_arguments);
		int _la;
		try {
			int _alt;
			State = 1116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				_localctx = new VariableArgsNoneOrSomeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STATIC - 72)) | (1L << (UNSAFE - 72)) | (1L << (VOLATILE - 72)) | (1L << (UNSIGNED - 72)) | (1L << (SIGNED - 72)) | (1L << (FIXED - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1088;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
					case 1:
						{
						State = 1087;
						label();
						}
						break;
					}
					State = 1090;
					variable_parameter();
					State = 1098;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1091;
							Match(T__8);
							State = 1093;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
							case 1:
								{
								State = 1092;
								label();
								}
								break;
							}
							State = 1095;
							variable_parameter();
							}
							} 
						}
						State = 1100;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
					}
					State = 1107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__8) {
						{
						State = 1101;
						Match(T__8);
						State = 1103;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STATIC - 72)) | (1L << (UNSAFE - 72)) | (1L << (VOLATILE - 72)) | (1L << (UNSIGNED - 72)) | (1L << (SIGNED - 72)) | (1L << (FIXED - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
							{
							State = 1102;
							variable_type(0);
							}
						}

						State = 1105;
						Match(T__12);
						State = 1106;
						Match(IDENTIFIER);
						}
					}

					}
				}

				}
				break;
			case 2:
				_localctx = new VariableArgsVariadicOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << ATOMIC) | (1L << CONST))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (STATIC - 72)) | (1L << (UNSAFE - 72)) | (1L << (VOLATILE - 72)) | (1L << (UNSIGNED - 72)) | (1L << (SIGNED - 72)) | (1L << (FIXED - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1111;
					variable_type(0);
					}
				}

				State = 1114;
				Match(T__12);
				State = 1115;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(AsylumParser.IDENTIFIER, 0); }
		public Variable_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariable_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariable_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_parameterContext variable_parameter() {
		Variable_parameterContext _localctx = new Variable_parameterContext(Context, State);
		EnterRule(_localctx, 98, RULE_variable_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			variable_type(0);
			State = 1119;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_typeContext : ParserRuleContext {
		public Variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_type; } }
	 
		public Variable_typeContext() { }
		public virtual void CopyFrom(Variable_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarTypeCustomContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_or_functionContext variable_or_function() {
			return GetRuleContext<Variable_or_functionContext>(0);
		}
		public VarTypeCustomContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeCustom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeCustom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeCustom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeGenericsContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		public VarTypeGenericsContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeGenerics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeGenerics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeGenerics(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeDietPointerContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(AsylumParser.OP_MUL, 0); }
		public VarTypeDietPointerContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeDietPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeDietPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeDietPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeStaticContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(AsylumParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public VarTypeStaticContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeStatic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeStatic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeStatic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeVolatileContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(AsylumParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public VarTypeVolatileContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeVolatile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeVolatile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeVolatile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeArrayContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(AsylumParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(AsylumParser.INTEGER, i);
		}
		public VarTypeArrayContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeTupleContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		public VarTypeTupleContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeThisContext : Variable_typeContext {
		public VarTypeThisContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeThis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeThis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeThis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeTupleProperContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		public VarTypeTupleProperContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeTupleProper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeTupleProper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeTupleProper(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeConstantContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(AsylumParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		public VarTypeConstantContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeAtomicContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOMIC() { return GetToken(AsylumParser.ATOMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		public VarTypeAtomicContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypeRawPointerContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(AsylumParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type() {
			return GetRuleContext<Variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(AsylumParser.OP_MUL, 0); }
		public VarTypeRawPointerContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypeRawPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypeRawPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypeRawPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarTypePrimitiveContext : Variable_typeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitivesContext primitives() {
			return GetRuleContext<PrimitivesContext>(0);
		}
		public VarTypePrimitiveContext(Variable_typeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVarTypePrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVarTypePrimitive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarTypePrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_typeContext variable_type() {
		return variable_type(0);
	}

	private Variable_typeContext variable_type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Variable_typeContext _localctx = new Variable_typeContext(Context, _parentState);
		Variable_typeContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_variable_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				_localctx = new VarTypePrimitiveContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1122;
				primitives();
				}
				break;
			case 2:
				{
				_localctx = new VarTypeTupleProperContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1123;
				Match(T__3);
				State = 1124;
				variable_type(0);
				State = 1127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1125;
					Match(T__8);
					State = 1126;
					variable_type(0);
					}
					}
					State = 1129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__8 );
				State = 1131;
				Match(T__4);
				}
				break;
			case 3:
				{
				_localctx = new VarTypeRawPointerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1133;
				Match(UNSAFE);
				State = 1134;
				variable_type(0);
				State = 1135;
				Match(OP_MUL);
				}
				break;
			case 4:
				{
				_localctx = new VarTypeConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1137;
				Match(CONST);
				State = 1138;
				variable_type(6);
				}
				break;
			case 5:
				{
				_localctx = new VarTypeStaticContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1139;
				Match(STATIC);
				State = 1140;
				variable_type(5);
				}
				break;
			case 6:
				{
				_localctx = new VarTypeVolatileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1141;
				Match(VOLATILE);
				State = 1142;
				variable_type(4);
				}
				break;
			case 7:
				{
				_localctx = new VarTypeAtomicContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1143;
				Match(ATOMIC);
				State = 1144;
				Match(OP_LT);
				State = 1145;
				variable_type(0);
				State = 1146;
				Match(OP_GT);
				}
				break;
			case 8:
				{
				_localctx = new VarTypeCustomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1148;
				variable_or_function();
				}
				break;
			case 9:
				{
				_localctx = new VarTypeThisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1149;
				Match(T__13);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1190;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1188;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
					case 1:
						{
						_localctx = new VarTypeDietPointerContext(new Variable_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_variable_type);
						State = 1152;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1153;
						Match(OP_MUL);
						}
						break;
					case 2:
						{
						_localctx = new VarTypeArrayContext(new Variable_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_variable_type);
						State = 1154;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1155;
						Match(T__7);
						State = 1157;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==INTEGER) {
							{
							State = 1156;
							Match(INTEGER);
							}
						}

						State = 1165;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__8) {
							{
							{
							State = 1159;
							Match(T__8);
							State = 1161;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==INTEGER) {
								{
								State = 1160;
								Match(INTEGER);
								}
							}

							}
							}
							State = 1167;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1168;
						Match(T__9);
						}
						break;
					case 3:
						{
						_localctx = new VarTypeGenericsContext(new Variable_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_variable_type);
						State = 1169;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1170;
						Match(OP_LT);
						State = 1171;
						variable_type(0);
						State = 1176;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__8) {
							{
							{
							State = 1172;
							Match(T__8);
							State = 1173;
							variable_type(0);
							}
							}
							State = 1178;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1179;
						Match(OP_GT);
						}
						break;
					case 4:
						{
						_localctx = new VarTypeTupleContext(new Variable_typeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_variable_type);
						State = 1181;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1184;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 1182;
								Match(T__8);
								State = 1183;
								variable_type(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 1186;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 1192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitivesContext : ParserRuleContext {
		public PrimitivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitives; } }
	 
		public PrimitivesContext() { }
		public virtual void CopyFrom(PrimitivesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimitiveDoubleContext : PrimitivesContext {
		public PrimitiveDoubleContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveDouble(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFixedAnyContext : PrimitivesContext {
		public PrimitiveFixedAnyContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveFixedAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveFixedAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFixedAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveBoolContext : PrimitivesContext {
		public PrimitiveBoolContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveObjectContext : PrimitivesContext {
		public PrimitiveObjectContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveVoidContext : PrimitivesContext {
		public PrimitiveVoidContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveVoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveUnsignedAnyContext : PrimitivesContext {
		public PrimitiveUnsignedAnyContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveUnsignedAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveUnsignedAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveUnsignedAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFixedContext : PrimitivesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(AsylumParser.FIXED, 0); }
		public PrimitiveFixedContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveFixed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveFixed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFixed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveExtendedContext : PrimitivesContext {
		public PrimitiveExtendedContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveExtended(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveExtended(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExtended(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveEventContext : PrimitivesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		public PrimitiveEventContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveEvent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveStringContext : PrimitivesContext {
		public PrimitiveStringContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveCharContext : PrimitivesContext {
		public PrimitiveCharContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveHalfContext : PrimitivesContext {
		public PrimitiveHalfContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveHalf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveHalf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveHalf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFloatingAnyContext : PrimitivesContext {
		public PrimitiveFloatingAnyContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveFloatingAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveFloatingAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFloatingAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFloatContext : PrimitivesContext {
		public PrimitiveFloatContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveAutoVariableContext : PrimitivesContext {
		public PrimitiveAutoVariableContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveAutoVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveAutoVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveAutoVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveWideCharContext : PrimitivesContext {
		public PrimitiveWideCharContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveWideChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveWideChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveWideChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveSignedContext : PrimitivesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(AsylumParser.SIGNED, 0); }
		public PrimitiveSignedContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveSigned(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveSigned(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveSigned(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveDecimalContext : PrimitivesContext {
		public PrimitiveDecimalContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveFunctionContext : PrimitivesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext[] variable_type() {
			return GetRuleContexts<Variable_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_typeContext variable_type(int i) {
			return GetRuleContext<Variable_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		public PrimitiveFunctionContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveSignedAnyContext : PrimitivesContext {
		public PrimitiveSignedAnyContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveSignedAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveSignedAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveSignedAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveVarLenContext : PrimitivesContext {
		public PrimitiveVarLenContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveVarLen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveVarLen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveVarLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveUnsignedContext : PrimitivesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(AsylumParser.UNSIGNED, 0); }
		public PrimitiveUnsignedContext(PrimitivesContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterPrimitiveUnsigned(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitPrimitiveUnsigned(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveUnsigned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitivesContext primitives() {
		PrimitivesContext _localctx = new PrimitivesContext(Context, State);
		EnterRule(_localctx, 102, RULE_primitives);
		int _la;
		try {
			State = 1241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				_localctx = new PrimitiveStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1193;
				Match(T__14);
				}
				break;
			case T__15:
				_localctx = new PrimitiveBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1194;
				Match(T__15);
				}
				break;
			case UNSIGNED:
				_localctx = new PrimitiveUnsignedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1195;
				Match(UNSIGNED);
				}
				break;
			case SIGNED:
				_localctx = new PrimitiveSignedContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1196;
				Match(SIGNED);
				}
				break;
			case T__16:
				_localctx = new PrimitiveHalfContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1197;
				Match(T__16);
				}
				break;
			case T__17:
				_localctx = new PrimitiveFloatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1198;
				Match(T__17);
				}
				break;
			case T__18:
				_localctx = new PrimitiveDoubleContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1199;
				Match(T__18);
				}
				break;
			case T__19:
				_localctx = new PrimitiveExtendedContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1200;
				Match(T__19);
				}
				break;
			case T__20:
				_localctx = new PrimitiveDecimalContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1201;
				Match(T__20);
				}
				break;
			case FIXED:
				_localctx = new PrimitiveFixedContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1202;
				Match(FIXED);
				}
				break;
			case T__21:
				_localctx = new PrimitiveVarLenContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1203;
				Match(T__21);
				}
				break;
			case T__22:
				_localctx = new PrimitiveObjectContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1204;
				Match(T__22);
				}
				break;
			case T__23:
				_localctx = new PrimitiveVoidContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1205;
				Match(T__23);
				}
				break;
			case T__24:
				_localctx = new PrimitiveFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1206;
				Match(T__24);
				State = 1218;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1207;
					Match(OP_LT);
					State = 1208;
					variable_type(0);
					State = 1213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__8) {
						{
						{
						State = 1209;
						Match(T__8);
						State = 1210;
						variable_type(0);
						}
						}
						State = 1215;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1216;
					Match(OP_GT);
					}
					break;
				}
				}
				break;
			case T__25:
				_localctx = new PrimitiveEventContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1220;
				Match(T__25);
				State = 1232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
				case 1:
					{
					State = 1221;
					Match(OP_LT);
					State = 1222;
					variable_type(0);
					State = 1227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__8) {
						{
						{
						State = 1223;
						Match(T__8);
						State = 1224;
						variable_type(0);
						}
						}
						State = 1229;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1230;
					Match(OP_GT);
					}
					break;
				}
				}
				break;
			case T__26:
				_localctx = new PrimitiveCharContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1234;
				Match(T__26);
				}
				break;
			case T__27:
				_localctx = new PrimitiveWideCharContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1235;
				Match(T__27);
				}
				break;
			case T__28:
				_localctx = new PrimitiveAutoVariableContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1236;
				Match(T__28);
				}
				break;
			case T__29:
				_localctx = new PrimitiveUnsignedAnyContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1237;
				Match(T__29);
				}
				break;
			case T__30:
				_localctx = new PrimitiveSignedAnyContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1238;
				Match(T__30);
				}
				break;
			case T__31:
				_localctx = new PrimitiveFloatingAnyContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1239;
				Match(T__31);
				}
				break;
			case T__32:
				_localctx = new PrimitiveFixedAnyContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1240;
				Match(T__32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_constantsContext : ParserRuleContext {
		public Defined_constantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_constants; } }
	 
		public Defined_constantsContext() { }
		public virtual void CopyFrom(Defined_constantsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantTrueContext : Defined_constantsContext {
		public ConstantTrueContext(Defined_constantsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterConstantTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitConstantTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantNullContext : Defined_constantsContext {
		public ConstantNullContext(Defined_constantsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterConstantNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitConstantNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantFalseContext : Defined_constantsContext {
		public ConstantFalseContext(Defined_constantsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterConstantFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitConstantFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Defined_constantsContext defined_constants() {
		Defined_constantsContext _localctx = new Defined_constantsContext(Context, State);
		EnterRule(_localctx, 104, RULE_defined_constants);
		try {
			State = 1246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				_localctx = new ConstantTrueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1243;
				Match(T__33);
				}
				break;
			case T__34:
				_localctx = new ConstantFalseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1244;
				Match(T__34);
				}
				break;
			case T__35:
				_localctx = new ConstantNullContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1245;
				Match(T__35);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_or_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(AsylumParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(AsylumParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitivesContext primitives() {
			return GetRuleContext<PrimitivesContext>(0);
		}
		public Variable_or_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_or_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterVariable_or_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitVariable_or_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_or_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_or_functionContext variable_or_function() {
		Variable_or_functionContext _localctx = new Variable_or_functionContext(Context, State);
		EnterRule(_localctx, 106, RULE_variable_or_function);
		try {
			int _alt;
			State = 1257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248;
				Match(IDENTIFIER);
				State = 1253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1249;
						Match(T__0);
						State = 1250;
						Match(IDENTIFIER);
						}
						} 
					}
					State = 1255;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
				}
				}
				break;
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case UNSIGNED:
			case SIGNED:
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1256;
				primitives();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(AsylumParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(AsylumParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADDRESS_OF() { return GetToken(AsylumParser.OP_ADDRESS_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR() { return GetToken(AsylumParser.OP_BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(AsylumParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(AsylumParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(AsylumParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GT() { return GetToken(AsylumParser.OP_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(AsylumParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LT() { return GetToken(AsylumParser.OP_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(AsylumParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MEMBER_ACCESS() { return GetToken(AsylumParser.OP_MEMBER_ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_MINUS() { return GetToken(AsylumParser.OP_MINUS_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD() { return GetToken(AsylumParser.OP_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(AsylumParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(AsylumParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(AsylumParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(AsylumParser.OP_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_PLUS() { return GetToken(AsylumParser.OP_PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(AsylumParser.OP_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(AsylumParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(AsylumParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_TILDE() { return GetToken(AsylumParser.OP_TILDE, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 108, RULE_operator);
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN_OP_EQ:
			case ASSIGN_OP_ADD_EQ:
			case ASSIGN_OP_SUB_EQ:
			case ASSIGN_OP_EXP_EQ:
			case ASSIGN_OP_MUL_EQ:
			case ASSIGN_OP_DIV_EQ:
			case ASSIGN_OP_MOD_EQ:
			case ASSIGN_OP_AND_EQ:
			case ASSIGN_OP_OR_EQ:
			case ASSIGN_OP_XOR_EQ:
			case ASSIGN_OP_LSHIFT_EQ:
			case ASSIGN_OP_RSHIFT_EQ:
			case ASSIGN_OP_CHECK_NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1259;
				assignment_operator();
				}
				break;
			case OP_ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1260;
				Match(OP_ADD);
				}
				break;
			case OP_AND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1261;
				Match(OP_AND);
				}
				break;
			case OP_ADDRESS_OF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1262;
				Match(OP_ADDRESS_OF);
				}
				break;
			case OP_BITWISE_OR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1263;
				Match(OP_BITWISE_OR);
				}
				break;
			case OP_DIV:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1264;
				Match(OP_DIV);
				}
				break;
			case OP_EQ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1265;
				Match(OP_EQ);
				}
				break;
			case OP_GE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1266;
				Match(OP_GE);
				}
				break;
			case OP_GT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1267;
				Match(OP_GT);
				}
				break;
			case OP_LE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1268;
				Match(OP_LE);
				}
				break;
			case OP_LT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1269;
				Match(OP_LT);
				}
				break;
			case OP_LSHIFT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1270;
				Match(OP_LSHIFT);
				}
				break;
			case OP_MEMBER_ACCESS:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1271;
				Match(OP_MEMBER_ACCESS);
				}
				break;
			case OP_MINUS_MINUS:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1272;
				Match(OP_MINUS_MINUS);
				}
				break;
			case OP_MOD:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1273;
				Match(OP_MOD);
				}
				break;
			case OP_MUL:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1274;
				Match(OP_MUL);
				}
				break;
			case OP_OR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1275;
				Match(OP_OR);
				}
				break;
			case OP_NE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1276;
				Match(OP_NE);
				}
				break;
			case OP_NOT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1277;
				Match(OP_NOT);
				}
				break;
			case OP_PLUS_PLUS:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1278;
				Match(OP_PLUS_PLUS);
				}
				break;
			case OP_RANGE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1279;
				Match(OP_RANGE);
				}
				break;
			case OP_RSHIFT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1280;
				Match(OP_RSHIFT);
				}
				break;
			case OP_SUB:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1281;
				Match(OP_SUB);
				}
				break;
			case OP_TILDE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1282;
				Match(OP_TILDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_ADD_EQ() { return GetToken(AsylumParser.ASSIGN_OP_ADD_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_SUB_EQ() { return GetToken(AsylumParser.ASSIGN_OP_SUB_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_EXP_EQ() { return GetToken(AsylumParser.ASSIGN_OP_EXP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_MUL_EQ() { return GetToken(AsylumParser.ASSIGN_OP_MUL_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_DIV_EQ() { return GetToken(AsylumParser.ASSIGN_OP_DIV_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_MOD_EQ() { return GetToken(AsylumParser.ASSIGN_OP_MOD_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_AND_EQ() { return GetToken(AsylumParser.ASSIGN_OP_AND_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_OR_EQ() { return GetToken(AsylumParser.ASSIGN_OP_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_XOR_EQ() { return GetToken(AsylumParser.ASSIGN_OP_XOR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_LSHIFT_EQ() { return GetToken(AsylumParser.ASSIGN_OP_LSHIFT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_RSHIFT_EQ() { return GetToken(AsylumParser.ASSIGN_OP_RSHIFT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_CHECK_NULL() { return GetToken(AsylumParser.ASSIGN_OP_CHECK_NULL, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAsylumListener typedListener = listener as IAsylumListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAsylumVisitor<TResult> typedVisitor = visitor as IAsylumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (ASSIGN_OP_EQ - 82)) | (1L << (ASSIGN_OP_ADD_EQ - 82)) | (1L << (ASSIGN_OP_SUB_EQ - 82)) | (1L << (ASSIGN_OP_EXP_EQ - 82)) | (1L << (ASSIGN_OP_MUL_EQ - 82)) | (1L << (ASSIGN_OP_DIV_EQ - 82)) | (1L << (ASSIGN_OP_MOD_EQ - 82)) | (1L << (ASSIGN_OP_AND_EQ - 82)) | (1L << (ASSIGN_OP_OR_EQ - 82)) | (1L << (ASSIGN_OP_XOR_EQ - 82)) | (1L << (ASSIGN_OP_LSHIFT_EQ - 82)) | (1L << (ASSIGN_OP_RSHIFT_EQ - 82)) | (1L << (ASSIGN_OP_CHECK_NULL - 82)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 37: return type_implements_extended_expression_sempred((Type_implements_extended_expressionContext)_localctx, predIndex);
		case 41: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 50: return variable_type_sempred((Variable_typeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_implements_extended_expression_sempred(Type_implements_extended_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 19);
		}
		return true;
	}
	private bool variable_type_sempred(Variable_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 10);
		case 18: return Precpred(Context, 9);
		case 19: return Precpred(Context, 8);
		case 20: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x85', '\x50A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x3', '\x2', '\a', '\x2', 't', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'w', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x83', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x87', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x8C', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x8F', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', '\x92', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\x9A', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x9D', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\a', '\a', '\xA4', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xA7', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xAB', 
		'\n', '\a', '\x3', '\a', '\a', '\a', '\xAE', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xB1', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xBA', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\a', '\t', '\xC1', '\n', '\t', '\f', '\t', '\xE', '\t', '\xC4', '\v', 
		'\t', '\x3', '\t', '\x5', '\t', '\xC7', '\n', '\t', '\x3', '\t', '\a', 
		'\t', '\xCA', '\n', '\t', '\f', '\t', '\xE', '\t', '\xCD', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD2', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xD9', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xE1', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xE4', '\v', '\t', '\x3', '\t', '\x5', '\t', '\xE7', 
		'\n', '\t', '\x3', '\t', '\x5', '\t', '\xEA', '\n', '\t', '\x3', '\n', 
		'\a', '\n', '\xED', '\n', '\n', '\f', '\n', '\xE', '\n', '\xF0', '\v', 
		'\n', '\x3', '\n', '\x5', '\n', '\xF3', '\n', '\n', '\x3', '\n', '\a', 
		'\n', '\xF6', '\n', '\n', '\f', '\n', '\xE', '\n', '\xF9', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\xFD', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x108', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\x10B', '\v', '\n', '\x3', '\n', '\x5', '\n', '\x10E', 
		'\n', '\n', '\x3', '\n', '\x5', '\n', '\x111', '\n', '\n', '\x3', '\v', 
		'\a', '\v', '\x114', '\n', '\v', '\f', '\v', '\xE', '\v', '\x117', '\v', 
		'\v', '\x3', '\v', '\x5', '\v', '\x11A', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x123', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x12B', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x12E', '\v', '\v', '\x3', '\v', '\x5', '\v', 
		'\x131', '\n', '\v', '\x3', '\v', '\x5', '\v', '\x134', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\x13C', '\n', '\f', '\f', '\f', '\xE', '\f', '\x13F', '\v', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x143', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\a', '\r', '\x148', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x14B', '\v', '\r', '\x3', '\r', '\x5', '\r', '\x14E', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x154', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x15A', '\n', '\r', '\f', '\r', '\xE', '\r', '\x15D', 
		'\v', '\r', '\x5', '\r', '\x15F', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x166', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\x16D', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x170', 
		'\v', '\xE', '\x5', '\xE', '\x172', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x177', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x17E', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x181', '\v', '\xE', '\x5', '\xE', 
		'\x183', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x188', '\n', '\xE', '\x5', '\xE', '\x18A', '\n', '\xE', '\x3', 
		'\xF', '\a', '\xF', '\x18D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x190', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x194', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x6', '\xF', '\x19C', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\x19D', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\a', 
		'\x10', '\x1A3', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1A6', '\v', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x1A9', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1AE', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x1B1', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x1B5', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x1B8', 
		'\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x1BC', '\n', 
		'\x10', '\x3', '\x11', '\a', '\x11', '\x1BF', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\x1C2', '\v', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1C5', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x1CA', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1CD', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x1D1', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x1D4', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x1D8', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x1DE', '\n', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x1E1', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x1E5', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x1E8', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x1F0', '\n', '\x13', '\x3', '\x14', 
		'\a', '\x14', '\x1F3', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x1F6', 
		'\v', '\x14', '\x3', '\x14', '\x5', '\x14', '\x1F9', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x203', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x206', '\v', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x20D', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x5', '\x16', '\x215', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x21A', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x21F', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x223', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x229', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x22C', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x233', '\n', '\x17', '\x5', '\x17', '\x235', '\n', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x238', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x23E', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\x241', '\v', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x248', 
		'\n', '\x17', '\x5', '\x17', '\x24A', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x251', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x255', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x258', '\v', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x25C', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x275', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\a', '\x19', '\x279', '\n', '\x19', '\f', '\x19', '\xE', 
		'\x19', '\x27C', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x280', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x295', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x2A2', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x2A9', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x2AD', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x5', '\x1F', '\x2B2', '\n', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\a', '\x1F', '\x2BB', '\n', '\x1F', '\f', '\x1F', '\xE', 
		'\x1F', '\x2BE', '\v', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x2C2', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x2C9', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x6', ' ', '\x2CE', '\n', ' ', '\r', ' ', '\xE', ' ', '\x2CF', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x6', 
		'!', '\x2D8', '\n', '!', '\r', '!', '\xE', '!', '\x2D9', '\x3', '!', '\a', 
		'!', '\x2DD', '\n', '!', '\f', '!', '\xE', '!', '\x2E0', '\v', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', 
		'!', '\x2E8', '\n', '!', '\f', '!', '\xE', '!', '\x2EB', '\v', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x2EF', '\n', '!', '\x3', '\"', '\x5', '\"', 
		'\x2F2', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x2F6', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x2FA', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x2FF', '\n', '\"', '\x3', 
		'\"', '\a', '\"', '\x302', '\n', '\"', '\f', '\"', '\xE', '\"', '\x305', 
		'\v', '\"', '\x5', '\"', '\x307', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', 
		'\x310', '\n', '#', '\f', '#', '\xE', '#', '\x313', '\v', '#', '\x5', 
		'#', '\x315', '\n', '#', '\x3', '#', '\x5', '#', '\x318', '\n', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', '\x31E', '\n', '#', 
		'\f', '#', '\xE', '#', '\x321', '\v', '#', '\x5', '#', '\x323', '\n', 
		'#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', 
		'$', '\x32A', '\n', '$', '\f', '$', '\xE', '$', '\x32D', '\v', '$', '\x3', 
		'$', '\x5', '$', '\x330', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x339', '\n', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x344', '\n', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\a', '\'', '\x34C', '\n', '\'', '\f', '\'', '\xE', '\'', 
		'\x34F', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', 
		'(', '\x355', '\n', '(', '\f', '(', '\xE', '(', '\x358', '\v', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x5', ')', '\x35D', '\n', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x362', '\n', ')', '\a', ')', '\x364', 
		'\n', ')', '\f', ')', '\xE', ')', '\x367', '\v', ')', '\x3', ')', '\x3', 
		')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x36F', 
		'\n', '*', '\f', '*', '\xE', '*', '\x372', '\v', '*', '\x3', '*', '\x3', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x37E', '\n', '+', '\x3', '+', 
		'\x3', '+', '\a', '+', '\x382', '\n', '+', '\f', '+', '\xE', '+', '\x385', 
		'\v', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x38A', '\n', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x38F', '\n', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x3BE', '\n', '+', '\f', 
		'+', '\xE', '+', '\x3C1', '\v', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x3CC', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x5', ',', '\x3D4', '\n', ',', '\x3', ',', 
		'\x3', ',', '\x5', ',', '\x3D8', '\n', ',', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x3F4', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x3FE', '\n', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x6', '/', '\x403', '\n', '/', 
		'\r', '/', '\xE', '/', '\x404', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\a', '/', '\x40D', '\n', '/', '\f', '/', 
		'\xE', '/', '\x410', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x415', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\a', '\x30', '\x41A', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x41D', 
		'\v', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x425', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x428', '\v', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', 
		'\x430', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x433', '\v', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x438', '\n', 
		'\x30', '\f', '\x30', '\xE', '\x30', '\x43B', '\v', '\x30', '\x5', '\x30', 
		'\x43D', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x32', '\x5', '\x32', '\x443', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x448', '\n', '\x32', '\x3', '\x32', '\a', 
		'\x32', '\x44B', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x44E', '\v', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x452', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x456', '\n', '\x32', '\x5', 
		'\x32', '\x458', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x45B', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x45F', '\n', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x6', 
		'\x34', '\x46A', '\n', '\x34', '\r', '\x34', '\xE', '\x34', '\x46B', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x481', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x488', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x48C', '\n', '\x34', '\a', '\x34', '\x48E', '\n', 
		'\x34', '\f', '\x34', '\xE', '\x34', '\x491', '\v', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\a', '\x34', '\x499', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x49C', 
		'\v', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x6', '\x34', '\x4A3', '\n', '\x34', '\r', '\x34', '\xE', 
		'\x34', '\x4A4', '\a', '\x34', '\x4A7', '\n', '\x34', '\f', '\x34', '\xE', 
		'\x34', '\x4AA', '\v', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\a', '\x35', '\x4BE', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x4C1', 
		'\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x4C5', '\n', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\a', '\x35', '\x4CC', '\n', '\x35', '\f', '\x35', '\xE', '\x35', 
		'\x4CF', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x4D3', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x4DC', '\n', 
		'\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x4E1', 
		'\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', 
		'\x4E6', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x4E9', '\v', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x4EC', '\n', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x506', '\n', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x2', '\x5', 'L', 'T', '\x66', 
		':', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', '\x2', 
		'\f', '\x4', '\x2', '(', '(', 'J', 'J', '\x6', '\x2', '(', '(', '<', '<', 
		'J', 'J', 'O', 'O', '\x4', '\x2', '\x33', '\x33', ':', ':', '\x4', '\x2', 
		'\x65', '\x65', 'o', 'p', '\x4', '\x2', '\x61', '\x61', 'z', 'z', '\x4', 
		'\x2', 'k', 'k', 'y', 'y', '\a', '\x2', '\'', '\'', '?', '?', 'g', 'h', 
		'j', 'j', 'l', 'l', '\x4', '\x2', '\x66', '\x66', 'q', 'q', '\x5', '\x2', 
		'n', 'n', 'r', 'r', 'u', 'u', '\x3', '\x2', 'T', '`', '\x2', '\x5EA', 
		'\x2', 'u', '\x3', '\x2', '\x2', '\x2', '\x4', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x84', '\x3', '\x2', '\x2', '\x2', '\b', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xA0', '\x3', '\x2', '\x2', '\x2', '\f', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x115', '\x3', '\x2', '\x2', '\x2', '\x16', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x18E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1A4', '\x3', '\x2', '\x2', '\x2', ' ', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x1EF', '\x3', '\x2', '\x2', '\x2', '&', '\x1F4', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x20E', '\x3', '\x2', '\x2', '\x2', '*', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x30', '\x27F', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x281', '\x3', '\x2', '\x2', '\x2', '\x34', '\x284', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x2A8', '\x3', '\x2', '\x2', '\x2', ':', '\x2AA', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x2B1', '\x3', '\x2', '\x2', '\x2', '>', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x44', '\x30A', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x32F', '\x3', '\x2', '\x2', '\x2', 'H', '\x338', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x343', '\x3', '\x2', '\x2', '\x2', 'N', '\x350', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x359', '\x3', '\x2', '\x2', '\x2', 'R', '\x36A', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x389', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x3D7', '\x3', '\x2', '\x2', '\x2', 'X', '\x3F3', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\\', '\x414', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x43C', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x62', '\x45E', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x460', '\x3', '\x2', '\x2', '\x2', '\x66', '\x480', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x4E0', '\x3', '\x2', '\x2', '\x2', 'l', '\x4EB', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x505', '\x3', '\x2', '\x2', '\x2', 'p', '\x507', 
		'\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '\x4', '\x3', '\x2', 's', 
		'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x3', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x83', '\x5', '\x6', '\x4', '\x2', 'y', '\x83', '\x5', '\b', 
		'\x5', '\x2', 'z', '\x83', '\x5', '\f', '\a', '\x2', '{', '\x83', '\x5', 
		'\x10', '\t', '\x2', '|', '\x83', '\x5', '\x18', '\r', '\x2', '}', '\x83', 
		'\x5', '\x1C', '\xF', '\x2', '~', '\x83', '\x5', '\x1E', '\x10', '\x2', 
		'\x7F', '\x83', '\x5', ' ', '\x11', '\x2', '\x80', '\x83', '\x5', '\"', 
		'\x12', '\x2', '\x81', '\x83', '\x5', '(', '\x15', '\x2', '\x82', 'x', 
		'\x3', '\x2', '\x2', '\x2', '\x82', 'y', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x82', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '|', '\x3', '\x2', '\x2', '\x2', '\x82', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '~', '\x3', '\x2', '\x2', '\x2', '\x82', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x86', '\a', 'Q', '\x2', '\x2', '\x85', '\x87', '\a', 
		'J', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8D', '\a', '\x80', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'\x3', '\x2', '\x2', '\x8A', '\x8C', '\a', '\x80', '\x2', '\x2', '\x8B', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\a', '\x4', '\x2', 
		'\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x5', '\x2', '\x2', '\x94', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\a', '\x41', '\x2', '\x2', '\x96', '\x9B', '\a', 
		'\x80', '\x2', '\x2', '\x97', '\x98', '\a', '\x3', '\x2', '\x2', '\x98', 
		'\x9A', '\a', '\x80', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\x5', '\x2', '\x2', '\x9F', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\t', '\x2', '\x2', '\x2', '\xA1', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x16', '\f', 
		'\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\a', 
		'\x34', '\x2', '\x2', '\xA9', '\xAB', '\x5', 'Z', '.', '\x2', '\xAA', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', '\x5', 
		'\n', '\x6', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\a', '\x36', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x80', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '\x6', '\x2', '\x2', '\xB5', '\xB6', '\x5', 
		'\x62', '\x32', '\x2', '\xB6', '\xB9', '\a', '\a', '\x2', '\x2', '\xB7', 
		'\xB8', '\a', 'x', '\x2', '\x2', '\xB8', '\xBA', '\x5', '\x66', '\x34', 
		'\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\x5', '\x2', '\x2', '\xBC', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\t', '\x3', '\x2', '\x2', '\xBE', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC1', '\x5', '\x16', '\f', '\x2', '\xC0', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC7', '\x5', 'Z', '.', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', 
		'\x5', '\xE', '\b', '\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCF', '\a', '\x36', '\x2', '\x2', '\xCF', '\xD1', '\a', '\x80', 
		'\x2', '\x2', '\xD0', '\xD2', '\x5', 'P', ')', '\x2', '\xD1', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x6', 
		'\x2', '\x2', '\xD4', '\xD5', '\x5', '\x62', '\x32', '\x2', '\xD5', '\xD8', 
		'\a', '\a', '\x2', '\x2', '\xD6', '\xD7', '\a', 'x', '\x2', '\x2', '\xD7', 
		'\xD9', '\x5', '\x66', '\x34', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', 'i', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', 'T', '+', '\x2', '\xDC', '\xDD', '\a', '\x5', '\x2', '\x2', 
		'\xDD', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE2', '\a', '\b', 
		'\x2', '\x2', '\xDF', '\xE1', '\x5', '\x30', '\x19', '\x2', '\xE0', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\a', '\t', '\x2', '\x2', 
		'\xE6', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', 
		'\a', '\x5', '\x2', '\x2', '\xE9', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xED', '\x5', '\x16', '\f', '\x2', '\xEC', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', '\x5', 'Z', '.', '\x2', '\xF2', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', '\x5', 
		'\xE', '\b', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFC', '\x5', '\x66', '\x34', '\x2', '\xFB', '\xFD', '\x5', 'P', ')', 
		'\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\a', '\x6', '\x2', '\x2', '\xFF', '\x100', '\x5', '\x62', '\x32', 
		'\x2', '\x100', '\x110', '\a', '\a', '\x2', '\x2', '\x101', '\x102', '\a', 
		'i', '\x2', '\x2', '\x102', '\x103', '\x5', 'T', '+', '\x2', '\x103', 
		'\x104', '\a', '\x5', '\x2', '\x2', '\x104', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x109', '\a', '\b', '\x2', '\x2', '\x106', '\x108', '\x5', 
		'\x30', '\x19', '\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10E', '\a', '\t', '\x2', '\x2', '\x10D', '\x101', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\a', '\x5', '\x2', '\x2', 
		'\x110', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x13', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x114', '\x5', '\x16', '\f', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x119', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x11A', '\a', '<', '\x2', '\x2', '\x119', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\a', '\x43', '\x2', '\x2', '\x11C', '\x11D', '\x5', 'n', '\x38', '\x2', 
		'\x11D', '\x11E', '\a', '\x6', '\x2', '\x2', '\x11E', '\x11F', '\x5', 
		'\x62', '\x32', '\x2', '\x11F', '\x122', '\a', '\a', '\x2', '\x2', '\x120', 
		'\x121', '\a', 'x', '\x2', '\x2', '\x121', '\x123', '\x5', '\x66', '\x34', 
		'\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x125', '\a', 'i', '\x2', '\x2', '\x125', '\x126', '\x5', 'T', 
		'+', '\x2', '\x126', '\x127', '\a', '\x5', '\x2', '\x2', '\x127', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x12C', '\a', '\b', '\x2', '\x2', 
		'\x129', '\x12B', '\x5', '\x30', '\x19', '\x2', '\x12A', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\a', '\t', '\x2', '\x2', 
		'\x130', '\x124', '\x3', '\x2', '\x2', '\x2', '\x130', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x134', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x134', '\a', '\x5', '\x2', '\x2', '\x133', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\a', '\n', '\x2', '\x2', 
		'\x136', '\x142', '\a', '\x80', '\x2', '\x2', '\x137', '\x138', '\a', 
		'\x6', '\x2', '\x2', '\x138', '\x13D', '\x5', 'T', '+', '\x2', '\x139', 
		'\x13A', '\a', '\v', '\x2', '\x2', '\x13A', '\x13C', '\x5', 'T', '+', 
		'\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', '\a', '\x2', '\x2', '\x141', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x137', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\a', '\f', '\x2', '\x2', '\x145', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x146', '\x148', '\x5', '\x16', '\f', '\x2', '\x147', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\x5', 'Z', '.', 
		'\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\a', '\x32', '\x2', '\x2', '\x150', '\x153', '\a', 
		'\x80', '\x2', '\x2', '\x151', '\x152', '\a', '\r', '\x2', '\x2', '\x152', 
		'\x154', '\a', '\x7F', '\x2', '\x2', '\x153', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x15E', '\a', '\b', '\x2', '\x2', 
		'\x156', '\x15B', '\x5', '\x1A', '\xE', '\x2', '\x157', '\x158', '\a', 
		'\v', '\x2', '\x2', '\x158', '\x15A', '\x5', '\x1A', '\xE', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\a', '\t', '\x2', 
		'\x2', '\x161', '\x19', '\x3', '\x2', '\x2', '\x2', '\x162', '\x165', 
		'\a', '\x80', '\x2', '\x2', '\x163', '\x164', '\a', 'T', '\x2', '\x2', 
		'\x164', '\x166', '\a', '\x7F', '\x2', '\x2', '\x165', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x18A', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\a', '\x80', '\x2', 
		'\x2', '\x168', '\x171', '\a', '\x6', '\x2', '\x2', '\x169', '\x16E', 
		'\x5', '\x66', '\x34', '\x2', '\x16A', '\x16B', '\a', '\v', '\x2', '\x2', 
		'\x16B', '\x16D', '\x5', '\x66', '\x34', '\x2', '\x16C', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x176', '\a', '\a', '\x2', '\x2', '\x174', 
		'\x175', '\a', 'T', '\x2', '\x2', '\x175', '\x177', '\a', '\x7F', '\x2', 
		'\x2', '\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', '\x80', '\x2', '\x2', '\x179', '\x182', '\a', 
		'\b', '\x2', '\x2', '\x17A', '\x17F', '\x5', '\x64', '\x33', '\x2', '\x17B', 
		'\x17C', '\a', '\v', '\x2', '\x2', '\x17C', '\x17E', '\x5', '\x64', '\x33', 
		'\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', 
		'\a', '\t', '\x2', '\x2', '\x185', '\x186', '\a', 'T', '\x2', '\x2', '\x186', 
		'\x188', '\a', '\x7F', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x167', '\x3', '\x2', '\x2', '\x2', '\x189', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x18D', '\x5', '\x16', '\f', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x191', '\x3', '\x2', '\x2', '\x2', '\x190', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x193', '\a', 'O', '\x2', '\x2', '\x192', 
		'\x194', '\x5', 'Z', '.', '\x2', '\x193', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\a', 'P', '\x2', '\x2', 
		'\x196', '\x197', '\a', '\x80', '\x2', '\x2', '\x197', '\x19B', '\a', 
		'\b', '\x2', '\x2', '\x198', '\x199', '\x5', '\x64', '\x33', '\x2', '\x199', 
		'\x19A', '\a', '\x5', '\x2', '\x2', '\x19A', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\t', '\x2', '\x2', '\x1A0', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A3', '\x5', '\x16', '\f', 
		'\x2', '\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A9', '\x5', 'Z', '.', '\x2', '\x1A8', '\x1A7', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 'K', '\x2', '\x2', 
		'\x1AB', '\x1AD', '\a', '\x80', '\x2', '\x2', '\x1AC', '\x1AE', '\x5', 
		'P', ')', '\x2', '\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1B1', '\x5', 'N', '(', '\x2', '\x1B0', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B6', '\a', '\b', '\x2', 
		'\x2', '\x1B3', '\x1B5', '\x5', '*', '\x16', '\x2', '\x1B4', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BC', '\a', '\t', '\x2', 
		'\x2', '\x1BA', '\x1BC', '\a', '\x5', '\x2', '\x2', '\x1BB', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BF', '\x5', 
		'\x16', '\f', '\x2', '\x1BE', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C5', '\x5', 'Z', '.', '\x2', '\x1C4', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1C4', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '=', '\x2', '\x2', 
		'\x1C7', '\x1C9', '\a', '\x80', '\x2', '\x2', '\x1C8', '\x1CA', '\x5', 
		'P', ')', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CD', '\x5', 'N', '(', '\x2', '\x1CC', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D2', '\a', '\b', '\x2', 
		'\x2', '\x1CF', '\x1D1', '\x5', '*', '\x16', '\x2', '\x1D0', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D8', '\a', '\t', '\x2', 
		'\x2', '\x1D6', '\x1D8', '\a', '\x5', '\x2', '\x2', '\x1D7', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', '!', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '\x39', 
		'\x2', '\x2', '\x1DA', '\x1DD', '\x5', 'l', '\x37', '\x2', '\x1DB', '\x1DC', 
		'\a', '\x35', '\x2', '\x2', '\x1DC', '\x1DE', '\x5', '\x66', '\x34', '\x2', 
		'\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E1', '\x5', 'P', ')', '\x2', '\x1E0', '\x1DF', '\x3', '\x2', '\x2', 
		'\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E6', '\a', '\b', '\x2', '\x2', 
		'\x1E3', '\x1E5', '\x5', '$', '\x13', '\x2', '\x1E4', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\x1E5', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E7', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\a', '\t', '\x2', '\x2', 
		'\x1EA', '#', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1F0', '\x5', '\x10', 
		'\t', '\x2', '\x1EC', '\x1F0', '\x5', '\x12', '\n', '\x2', '\x1ED', '\x1F0', 
		'\x5', '\x14', '\v', '\x2', '\x1EE', '\x1F0', '\x5', '&', '\x14', '\x2', 
		'\x1EF', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F0', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x1F3', '\x5', '\x16', '\f', '\x2', '\x1F2', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F9', '\a', '<', '\x2', 
		'\x2', '\x1F8', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '\x1FB', '\t', '\x4', '\x2', '\x2', '\x1FB', '\x1FC', '\a', '\x6', 
		'\x2', '\x2', '\x1FC', '\x1FD', '\x5', '\x64', '\x33', '\x2', '\x1FD', 
		'\x1FE', '\a', '\a', '\x2', '\x2', '\x1FE', '\x1FF', '\a', 'x', '\x2', 
		'\x2', '\x1FF', '\x20C', '\x5', '\x66', '\x34', '\x2', '\x200', '\x204', 
		'\a', '\b', '\x2', '\x2', '\x201', '\x203', '\x5', '\x30', '\x19', '\x2', 
		'\x202', '\x201', '\x3', '\x2', '\x2', '\x2', '\x203', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x202', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x205', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x206', '\x204', '\x3', '\x2', '\x2', '\x2', '\x207', '\x20D', 
		'\a', '\t', '\x2', '\x2', '\x208', '\x209', '\a', 'i', '\x2', '\x2', '\x209', 
		'\x20A', '\x5', 'T', '+', '\x2', '\x20A', '\x20B', '\a', '\x5', '\x2', 
		'\x2', '\x20B', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x20D', '\'', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\a', 'M', 
		'\x2', '\x2', '\x20F', '\x210', '\x5', '\x66', '\x34', '\x2', '\x210', 
		'\x211', '\a', '\x80', '\x2', '\x2', '\x211', '\x212', '\a', '\x5', '\x2', 
		'\x2', '\x212', ')', '\x3', '\x2', '\x2', '\x2', '\x213', '\x215', '\x5', 
		'Z', '.', '\x2', '\x214', '\x213', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x219', '\x5', '\x64', '\x33', '\x2', '\x217', '\x21A', 
		'\a', '\x5', '\x2', '\x2', '\x218', '\x21A', '\x5', ',', '\x17', '\x2', 
		'\x219', '\x217', '\x3', '\x2', '\x2', '\x2', '\x219', '\x218', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21C', '\x5', 'Z', '.', '\x2', '\x21C', '\x21D', '\a', '\r', '\x2', 
		'\x2', '\x21D', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x21E', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '+', '\x3', '\x2', '\x2', '\x2', '\x220', '\x234', '\a', '\b', 
		'\x2', '\x2', '\x221', '\x223', '\x5', 'Z', '.', '\x2', '\x222', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x224', '\x3', '\x2', '\x2', '\x2', '\x224', '\x232', '\a', 
		'\x37', '\x2', '\x2', '\x225', '\x233', '\a', '\x5', '\x2', '\x2', '\x226', 
		'\x22A', '\a', '\b', '\x2', '\x2', '\x227', '\x229', '\x5', '\x30', '\x19', 
		'\x2', '\x228', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x233', '\a', '\t', '\x2', '\x2', '\x22E', '\x22F', '\a', 'i', '\x2', 
		'\x2', '\x22F', '\x230', '\x5', 'T', '+', '\x2', '\x230', '\x231', '\a', 
		'\x5', '\x2', '\x2', '\x231', '\x233', '\x3', '\x2', '\x2', '\x2', '\x232', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x232', '\x226', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x233', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x234', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x235', '\x3', '\x2', '\x2', '\x2', '\x235', '\x249', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x238', '\x5', 'Z', '.', '\x2', '\x237', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\x3', '\x2', '\x2', '\x2', '\x239', '\x247', 
		'\a', 'H', '\x2', '\x2', '\x23A', '\x248', '\a', '\x5', '\x2', '\x2', 
		'\x23B', '\x23F', '\a', '\b', '\x2', '\x2', '\x23C', '\x23E', '\x5', '\x30', 
		'\x19', '\x2', '\x23D', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23E', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', '\x2', '\x2', 
		'\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x248', '\a', '\t', '\x2', '\x2', '\x243', '\x244', '\a', 'i', 
		'\x2', '\x2', '\x244', '\x245', '\x5', 'T', '+', '\x2', '\x245', '\x246', 
		'\a', '\x5', '\x2', '\x2', '\x246', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x247', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x243', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x249', '\x237', '\x3', '\x2', '\x2', 
		'\x2', '\x249', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x251', '\a', '\t', '\x2', '\x2', 
		'\x24C', '\x24D', '\a', 'i', '\x2', '\x2', '\x24D', '\x24E', '\x5', 'T', 
		'+', '\x2', '\x24E', '\x24F', '\a', '\x5', '\x2', '\x2', '\x24F', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x250', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x251', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x256', '\a', '\b', '\x2', '\x2', '\x253', '\x255', 
		'\x5', '\x30', '\x19', '\x2', '\x254', '\x253', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x258', '\x3', '\x2', '\x2', '\x2', '\x256', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x258', '\x256', '\x3', '\x2', '\x2', 
		'\x2', '\x259', '\x25C', '\a', '\t', '\x2', '\x2', '\x25A', '\x25C', '\x5', 
		'\x30', '\x19', '\x2', '\x25B', '\x252', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x25C', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x25E', '\x5', '\x42', '\"', '\x2', '\x25E', '\x25F', 
		'\a', '\x5', '\x2', '\x2', '\x25F', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x261', '\x5', '\x44', '#', '\x2', '\x261', '\x262', '\a', '\x5', 
		'\x2', '\x2', '\x262', '\x280', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', 
		'\x5', '^', '\x30', '\x2', '\x264', '\x265', '\a', '\x5', '\x2', '\x2', 
		'\x265', '\x280', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\x5', 
		'\\', '/', '\x2', '\x267', '\x268', '\a', '\x5', '\x2', '\x2', '\x268', 
		'\x280', '\x3', '\x2', '\x2', '\x2', '\x269', '\x280', '\x5', '\x32', 
		'\x1A', '\x2', '\x26A', '\x280', '\x5', '\x34', '\x1B', '\x2', '\x26B', 
		'\x280', '\x5', '\x36', '\x1C', '\x2', '\x26C', '\x280', '\x5', '\x38', 
		'\x1D', '\x2', '\x26D', '\x280', '\x5', ':', '\x1E', '\x2', '\x26E', '\x280', 
		'\x5', '<', '\x1F', '\x2', '\x26F', '\x280', '\x5', '>', ' ', '\x2', '\x270', 
		'\x271', '\x5', 'T', '+', '\x2', '\x271', '\x272', '\a', '\x5', '\x2', 
		'\x2', '\x272', '\x280', '\x3', '\x2', '\x2', '\x2', '\x273', '\x275', 
		'\a', 'O', '\x2', '\x2', '\x274', '\x273', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x275', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x27A', '\a', '\b', '\x2', '\x2', '\x277', 
		'\x279', '\x5', '\x30', '\x19', '\x2', '\x278', '\x277', '\x3', '\x2', 
		'\x2', '\x2', '\x279', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x27D', '\x280', '\a', '\t', '\x2', '\x2', '\x27E', 
		'\x280', '\x5', 'H', '%', '\x2', '\x27F', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x260', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x269', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x26A', '\x3', 
		'\x2', '\x2', '\x2', '\x27F', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x27F', 
		'\x26C', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x26D', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x274', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x27E', '\x3', 
		'\x2', '\x2', '\x2', '\x280', '\x31', '\x3', '\x2', '\x2', '\x2', '\x281', 
		'\x282', '\a', '@', '\x2', '\x2', '\x282', '\x283', '\x5', '.', '\x18', 
		'\x2', '\x283', '\x33', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', 
		'\a', 'S', '\x2', '\x2', '\x285', '\x286', '\a', '\x6', '\x2', '\x2', 
		'\x286', '\x287', '\x5', 'T', '+', '\x2', '\x287', '\x288', '\a', '\a', 
		'\x2', '\x2', '\x288', '\x289', '\x5', '.', '\x18', '\x2', '\x289', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\a', '/', '\x2', '\x2', 
		'\x28B', '\x28C', '\x5', '.', '\x18', '\x2', '\x28C', '\x28D', '\a', 'S', 
		'\x2', '\x2', '\x28D', '\x28E', '\x5', 'T', '+', '\x2', '\x28E', '\x28F', 
		'\a', '\x5', '\x2', '\x2', '\x28F', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\x291', '\a', '\x35', '\x2', '\x2', '\x291', '\x294', '\a', 
		'\x6', '\x2', '\x2', '\x292', '\x295', '\x5', '\\', '/', '\x2', '\x293', 
		'\x295', '\x5', '^', '\x30', '\x2', '\x294', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x293', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', 
		'\x3', '\x2', '\x2', '\x2', '\x295', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x296', '\x297', '\a', '\x5', '\x2', '\x2', '\x297', '\x298', '\x5', 
		'T', '+', '\x2', '\x298', '\x299', '\a', '\x5', '\x2', '\x2', '\x299', 
		'\x29A', '\x5', 'T', '+', '\x2', '\x29A', '\x29B', '\a', '\a', '\x2', 
		'\x2', '\x29B', '\x29C', '\x5', '.', '\x18', '\x2', '\x29C', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\a', '\x35', '\x2', '\x2', 
		'\x29E', '\x2A1', '\a', '\x6', '\x2', '\x2', '\x29F', '\x2A2', '\x5', 
		'\x64', '\x33', '\x2', '\x2A0', '\x2A2', '\a', '\x80', '\x2', '\x2', '\x2A1', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', 
		'\a', ';', '\x2', '\x2', '\x2A4', '\x2A5', '\x5', 'T', '+', '\x2', '\x2A5', 
		'\x2A6', '\a', '\a', '\x2', '\x2', '\x2A6', '\x2A7', '\x5', '.', '\x18', 
		'\x2', '\x2A7', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\x2A9', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AC', '\a', '+', 
		'\x2', '\x2', '\x2AB', '\x2AD', '\a', '\x7F', '\x2', '\x2', '\x2AC', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', 
		'\x5', '\x2', '\x2', '\x2AF', ';', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2B2', '\a', '-', '\x2', '\x2', '\x2B1', '\x2B0', '\x3', '\x2', '\x2', 
		'\x2', '\x2B1', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\a', '\x38', '\x2', '\x2', 
		'\x2B4', '\x2B5', '\x5', 'T', '+', '\x2', '\x2B5', '\x2BC', '\x5', '.', 
		'\x18', '\x2', '\x2B6', '\x2B7', '\a', '\x30', '\x2', '\x2', '\x2B7', 
		'\x2B8', '\x5', 'T', '+', '\x2', '\x2B8', '\x2B9', '\x5', '.', '\x18', 
		'\x2', '\x2B9', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BE', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', 
		'\x2', '\x2', '\x2', '\x2BD', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2BE', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\a', '\x31', '\x2', 
		'\x2', '\x2C0', '\x2C2', '\x5', '.', '\x18', '\x2', '\x2C1', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\x3', '\x2', '\x2', '\x2', 
		'\x2C2', '=', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\a', 'L', 
		'\x2', '\x2', '\x2C4', '\x2C5', '\a', '\x6', '\x2', '\x2', '\x2C5', '\x2C8', 
		'\x5', 'l', '\x37', '\x2', '\x2C6', '\x2C7', '\a', 'i', '\x2', '\x2', 
		'\x2C7', '\x2C9', '\a', '\x80', '\x2', '\x2', '\x2C8', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\a', '\a', '\x2', 
		'\x2', '\x2CB', '\x2CD', '\a', '\b', '\x2', '\x2', '\x2CC', '\x2CE', '\x5', 
		'@', '!', '\x2', '\x2CD', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\a', '\t', '\x2', '\x2', 
		'\x2D2', '?', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\a', ',', 
		'\x2', '\x2', '\x2D4', '\x2D5', '\x5', 'T', '+', '\x2', '\x2D5', '\x2D6', 
		'\a', '\r', '\x2', '\x2', '\x2D6', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\x2D7', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\x3', 
		'\x2', '\x2', '\x2', '\x2D9', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D9', 
		'\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DE', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2DD', '\x5', '\x30', '\x19', '\x2', '\x2DC', '\x2DB', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2E0', '\x3', '\x2', '\x2', '\x2', 
		'\x2DE', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\x3', 
		'\x2', '\x2', '\x2', '\x2DF', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E0', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\a', '+', '\x2', 
		'\x2', '\x2E2', '\x2E3', '\a', '\x5', '\x2', '\x2', '\x2E3', '\x2EF', 
		'\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\a', '.', '\x2', '\x2', 
		'\x2E5', '\x2E9', '\a', '\r', '\x2', '\x2', '\x2E6', '\x2E8', '\x5', '\x30', 
		'\x19', '\x2', '\x2E7', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E7', '\x3', '\x2', '\x2', 
		'\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x2EC', '\x2ED', '\a', '+', '\x2', '\x2', '\x2ED', '\x2EF', '\a', '\x5', 
		'\x2', '\x2', '\x2EE', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2E4', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x2F0', '\x2F2', '\a', '*', '\x2', '\x2', '\x2F1', '\x2F0', '\x3', '\x2', 
		'\x2', '\x2', '\x2F1', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F5', '\x5', 'l', '\x37', '\x2', 
		'\x2F4', '\x2F6', '\x5', 'R', '*', '\x2', '\x2F5', '\x2F4', '\x3', '\x2', 
		'\x2', '\x2', '\x2F5', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F7', '\x306', '\a', '\x6', '\x2', '\x2', 
		'\x2F8', '\x2FA', '\x5', '`', '\x31', '\x2', '\x2F9', '\x2F8', '\x3', 
		'\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FA', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x303', '\x5', 'T', '+', 
		'\x2', '\x2FC', '\x2FE', '\a', '\v', '\x2', '\x2', '\x2FD', '\x2FF', '\x5', 
		'`', '\x31', '\x2', '\x2FE', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x302', '\x5', 'T', '+', '\x2', '\x301', '\x2FC', '\x3', 
		'\x2', '\x2', '\x2', '\x302', '\x305', '\x3', '\x2', '\x2', '\x2', '\x303', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x303', '\x304', '\x3', '\x2', '\x2', 
		'\x2', '\x304', '\x307', '\x3', '\x2', '\x2', '\x2', '\x305', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x306', '\x2F9', '\x3', '\x2', '\x2', '\x2', 
		'\x306', '\x307', '\x3', '\x2', '\x2', '\x2', '\x307', '\x308', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x309', '\a', '\a', '\x2', '\x2', '\x309', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x317', '\x5', '\x66', '\x34', 
		'\x2', '\x30B', '\x314', '\a', '\x6', '\x2', '\x2', '\x30C', '\x311', 
		'\x5', 'T', '+', '\x2', '\x30D', '\x30E', '\a', '\v', '\x2', '\x2', '\x30E', 
		'\x310', '\x5', 'T', '+', '\x2', '\x30F', '\x30D', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x313', '\x3', '\x2', '\x2', '\x2', '\x311', '\x30F', 
		'\x3', '\x2', '\x2', '\x2', '\x311', '\x312', '\x3', '\x2', '\x2', '\x2', 
		'\x312', '\x315', '\x3', '\x2', '\x2', '\x2', '\x313', '\x311', '\x3', 
		'\x2', '\x2', '\x2', '\x314', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\x3', '\x2', '\x2', 
		'\x2', '\x316', '\x318', '\a', '\a', '\x2', '\x2', '\x317', '\x30B', '\x3', 
		'\x2', '\x2', '\x2', '\x317', '\x318', '\x3', '\x2', '\x2', '\x2', '\x318', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x319', '\x322', '\a', '\b', '\x2', 
		'\x2', '\x31A', '\x31F', '\x5', '\x46', '$', '\x2', '\x31B', '\x31C', 
		'\a', '\v', '\x2', '\x2', '\x31C', '\x31E', '\x5', '\x46', '$', '\x2', 
		'\x31D', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x321', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x320', '\x3', '\x2', '\x2', '\x2', '\x320', '\x323', '\x3', '\x2', '\x2', 
		'\x2', '\x321', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x322', '\x31A', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x323', '\x3', '\x2', '\x2', '\x2', 
		'\x323', '\x324', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\a', 
		'\t', '\x2', '\x2', '\x325', '\x45', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x32B', '\a', '\x80', '\x2', '\x2', '\x327', '\x328', '\a', '\x3', '\x2', 
		'\x2', '\x328', '\x32A', '\a', '\x80', '\x2', '\x2', '\x329', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\x32A', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x32B', '\x329', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\x3', 
		'\x2', '\x2', '\x2', '\x32C', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x330', '\a', 'T', '\x2', 
		'\x2', '\x32F', '\x326', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x331', '\x332', '\x5', 'T', '+', '\x2', '\x332', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x333', '\x339', '\x5', 'T', '+', '\x2', '\x334', '\x335', 
		'\a', 'G', '\x2', '\x2', '\x335', '\x336', '\x5', 'T', '+', '\x2', '\x336', 
		'\x337', '\a', '\x5', '\x2', '\x2', '\x337', '\x339', '\x3', '\x2', '\x2', 
		'\x2', '\x338', '\x333', '\x3', '\x2', '\x2', '\x2', '\x338', '\x334', 
		'\x3', '\x2', '\x2', '\x2', '\x339', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x33A', '\x33B', '\a', '\r', '\x2', '\x2', '\x33B', '\x33C', '\x5', 'L', 
		'\'', '\x2', '\x33C', 'K', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33E', 
		'\b', '\'', '\x1', '\x2', '\x33E', '\x33F', '\a', '\x6', '\x2', '\x2', 
		'\x33F', '\x340', '\x5', 'L', '\'', '\x2', '\x340', '\x341', '\a', '\a', 
		'\x2', '\x2', '\x341', '\x344', '\x3', '\x2', '\x2', '\x2', '\x342', '\x344', 
		'\x5', '\x66', '\x34', '\x2', '\x343', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x342', '\x3', '\x2', '\x2', '\x2', '\x344', '\x34D', '\x3', 
		'\x2', '\x2', '\x2', '\x345', '\x346', '\f', '\x5', '\x2', '\x2', '\x346', 
		'\x347', '\a', '\x64', '\x2', '\x2', '\x347', '\x34C', '\x5', 'L', '\'', 
		'\x6', '\x348', '\x349', '\f', '\x4', '\x2', '\x2', '\x349', '\x34A', 
		'\a', '\v', '\x2', '\x2', '\x34A', '\x34C', '\x5', 'L', '\'', '\x5', '\x34B', 
		'\x345', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x34C', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', 
		'\x34E', 'M', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x34D', '\x3', '\x2', 
		'\x2', '\x2', '\x350', '\x351', '\a', '\r', '\x2', '\x2', '\x351', '\x356', 
		'\x5', '\x66', '\x34', '\x2', '\x352', '\x353', '\a', '\v', '\x2', '\x2', 
		'\x353', '\x355', '\x5', '\x66', '\x34', '\x2', '\x354', '\x352', '\x3', 
		'\x2', '\x2', '\x2', '\x355', '\x358', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x354', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\x3', '\x2', '\x2', 
		'\x2', '\x357', 'O', '\x3', '\x2', '\x2', '\x2', '\x358', '\x356', '\x3', 
		'\x2', '\x2', '\x2', '\x359', '\x35A', '\a', 'l', '\x2', '\x2', '\x35A', 
		'\x35C', '\a', '\x80', '\x2', '\x2', '\x35B', '\x35D', '\x5', 'J', '&', 
		'\x2', '\x35C', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35D', 
		'\x3', '\x2', '\x2', '\x2', '\x35D', '\x365', '\x3', '\x2', '\x2', '\x2', 
		'\x35E', '\x35F', '\a', '\v', '\x2', '\x2', '\x35F', '\x361', '\a', '\x80', 
		'\x2', '\x2', '\x360', '\x362', '\x5', 'J', '&', '\x2', '\x361', '\x360', 
		'\x3', '\x2', '\x2', '\x2', '\x361', '\x362', '\x3', '\x2', '\x2', '\x2', 
		'\x362', '\x364', '\x3', '\x2', '\x2', '\x2', '\x363', '\x35E', '\x3', 
		'\x2', '\x2', '\x2', '\x364', '\x367', '\x3', '\x2', '\x2', '\x2', '\x365', 
		'\x363', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x366', '\x368', '\x3', '\x2', '\x2', '\x2', '\x367', '\x365', 
		'\x3', '\x2', '\x2', '\x2', '\x368', '\x369', '\a', 'h', '\x2', '\x2', 
		'\x369', 'Q', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x36B', '\a', 'l', 
		'\x2', '\x2', '\x36B', '\x370', '\x5', '\x66', '\x34', '\x2', '\x36C', 
		'\x36D', '\a', '\v', '\x2', '\x2', '\x36D', '\x36F', '\x5', '\x66', '\x34', 
		'\x2', '\x36E', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x372', 
		'\x3', '\x2', '\x2', '\x2', '\x370', '\x36E', '\x3', '\x2', '\x2', '\x2', 
		'\x370', '\x371', '\x3', '\x2', '\x2', '\x2', '\x371', '\x373', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x370', '\x3', '\x2', '\x2', '\x2', '\x373', 
		'\x374', '\a', 'h', '\x2', '\x2', '\x374', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x375', '\x376', '\b', '+', '\x1', '\x2', '\x376', '\x377', '\a', '\x6', 
		'\x2', '\x2', '\x377', '\x378', '\x5', 'T', '+', '\x2', '\x378', '\x379', 
		'\a', '\a', '\x2', '\x2', '\x379', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x37A', '\x38A', '\x5', 'V', ',', '\x2', '\x37B', '\x38A', '\x5', 'X', 
		'-', '\x2', '\x37C', '\x37E', '\a', 'O', '\x2', '\x2', '\x37D', '\x37C', 
		'\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', 
		'\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x383', '\a', 
		'\b', '\x2', '\x2', '\x380', '\x382', '\x5', '\x30', '\x19', '\x2', '\x381', 
		'\x380', '\x3', '\x2', '\x2', '\x2', '\x382', '\x385', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\x381', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x384', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x385', '\x383', '\x3', '\x2', '\x2', '\x2', '\x386', '\x38A', '\a', 
		'\t', '\x2', '\x2', '\x387', '\x38A', '\a', '\x7F', '\x2', '\x2', '\x388', 
		'\x38A', '\a', '\x82', '\x2', '\x2', '\x389', '\x375', '\x3', '\x2', '\x2', 
		'\x2', '\x389', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x389', '\x37B', 
		'\x3', '\x2', '\x2', '\x2', '\x389', '\x37D', '\x3', '\x2', '\x2', '\x2', 
		'\x389', '\x387', '\x3', '\x2', '\x2', '\x2', '\x389', '\x388', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38C', '\f', '\x13', '\x2', '\x2', '\x38C', '\x38E', '\a', 'v', '\x2', 
		'\x2', '\x38D', '\x38F', '\a', 'T', '\x2', '\x2', '\x38E', '\x38D', '\x3', 
		'\x2', '\x2', '\x2', '\x38E', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x38F', 
		'\x390', '\x3', '\x2', '\x2', '\x2', '\x390', '\x3BE', '\x5', 'T', '+', 
		'\x14', '\x391', '\x392', '\f', '\x12', '\x2', '\x2', '\x392', '\x393', 
		'\t', '\x5', '\x2', '\x2', '\x393', '\x3BE', '\x5', 'T', '+', '\x13', 
		'\x394', '\x395', '\f', '\x11', '\x2', '\x2', '\x395', '\x396', '\t', 
		'\x6', '\x2', '\x2', '\x396', '\x3BE', '\x5', 'T', '+', '\x12', '\x397', 
		'\x398', '\f', '\x10', '\x2', '\x2', '\x398', '\x399', '\t', '\a', '\x2', 
		'\x2', '\x399', '\x3BE', '\x5', 'T', '+', '\x11', '\x39A', '\x39B', '\f', 
		'\xF', '\x2', '\x2', '\x39B', '\x39C', '\t', '\b', '\x2', '\x2', '\x39C', 
		'\x3BE', '\x5', 'T', '+', '\x10', '\x39D', '\x39E', '\f', '\xE', '\x2', 
		'\x2', '\x39E', '\x39F', '\t', '\t', '\x2', '\x2', '\x39F', '\x3BE', '\x5', 
		'T', '+', '\xF', '\x3A0', '\x3A1', '\f', '\r', '\x2', '\x2', '\x3A1', 
		'\x3A2', '\a', '\x62', '\x2', '\x2', '\x3A2', '\x3BE', '\x5', 'T', '+', 
		'\xE', '\x3A3', '\x3A4', '\f', '\f', '\x2', '\x2', '\x3A4', '\x3A5', '\a', 
		'm', '\x2', '\x2', '\x3A5', '\x3BE', '\x5', 'T', '+', '\r', '\x3A6', '\x3A7', 
		'\f', '\v', '\x2', '\x2', '\x3A7', '\x3A8', '\a', '\x64', '\x2', '\x2', 
		'\x3A8', '\x3BE', '\x5', 'T', '+', '\f', '\x3A9', '\x3AA', '\f', '\n', 
		'\x2', '\x2', '\x3AA', '\x3AB', '\a', '\x63', '\x2', '\x2', '\x3AB', '\x3BE', 
		'\x5', 'T', '+', '\v', '\x3AC', '\x3AD', '\f', '\t', '\x2', '\x2', '\x3AD', 
		'\x3AE', '\a', 't', '\x2', '\x2', '\x3AE', '\x3BE', '\x5', 'T', '+', '\n', 
		'\x3AF', '\x3B0', '\f', '\b', '\x2', '\x2', '\x3B0', '\x3B1', '\a', 's', 
		'\x2', '\x2', '\x3B1', '\x3BE', '\x5', 'T', '+', '\t', '\x3B2', '\x3B3', 
		'\f', '\a', '\x2', '\x2', '\x3B3', '\x3B4', '\a', '\xE', '\x2', '\x2', 
		'\x3B4', '\x3B5', '\x5', 'T', '+', '\x2', '\x3B5', '\x3B6', '\a', '\r', 
		'\x2', '\x2', '\x3B6', '\x3B7', '\x5', 'T', '+', '\a', '\x3B7', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', '\f', '\x6', '\x2', '\x2', 
		'\x3B9', '\x3BA', '\a', 'i', '\x2', '\x2', '\x3BA', '\x3BE', '\x5', 'T', 
		'+', '\a', '\x3BB', '\x3BC', '\f', '\x15', '\x2', '\x2', '\x3BC', '\x3BE', 
		'\t', '\n', '\x2', '\x2', '\x3BD', '\x38B', '\x3', '\x2', '\x2', '\x2', 
		'\x3BD', '\x391', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x394', '\x3', 
		'\x2', '\x2', '\x2', '\x3BD', '\x397', '\x3', '\x2', '\x2', '\x2', '\x3BD', 
		'\x39A', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x39D', '\x3', '\x2', '\x2', 
		'\x2', '\x3BD', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3A3', 
		'\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x3BD', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3AC', '\x3', 
		'\x2', '\x2', '\x2', '\x3BD', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3BD', 
		'\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3B8', '\x3', '\x2', '\x2', 
		'\x2', '\x3BD', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3BD', '\x3', '\x2', '\x2', '\x2', 
		'\x3BF', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C0', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3D8', 
		'\x5', 'l', '\x37', '\x2', '\x3C3', '\x3D8', '\x5', '\x44', '#', '\x2', 
		'\x3C4', '\x3D8', '\x5', '\x42', '\"', '\x2', '\x3C5', '\x3C6', '\a', 
		'\x42', '\x2', '\x2', '\x3C6', '\x3D8', '\x5', '\x42', '\"', '\x2', '\x3C7', 
		'\x3C8', '\a', 'N', '\x2', '\x2', '\x3C8', '\x3CB', '\a', '\x6', '\x2', 
		'\x2', '\x3C9', '\x3CC', '\x5', 'l', '\x37', '\x2', '\x3CA', '\x3CC', 
		'\x5', '\x66', '\x34', '\x2', '\x3CB', '\x3C9', '\x3', '\x2', '\x2', '\x2', 
		'\x3CB', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CD', '\x3', 
		'\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\a', '\a', '\x2', '\x2', '\x3CE', 
		'\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D0', '\a', 'I', '\x2', 
		'\x2', '\x3D0', '\x3D3', '\a', '\x6', '\x2', '\x2', '\x3D1', '\x3D4', 
		'\x5', 'l', '\x37', '\x2', '\x3D2', '\x3D4', '\x5', '\x66', '\x34', '\x2', 
		'\x3D3', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D2', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D5', 
		'\x3D6', '\a', '\a', '\x2', '\x2', '\x3D6', '\x3D8', '\x3', '\x2', '\x2', 
		'\x2', '\x3D7', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3C3', 
		'\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'\x3D7', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x3D7', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3D8', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DA', '\a', '\x61', '\x2', 
		'\x2', '\x3DA', '\x3F4', '\x5', 'T', '+', '\x2', '\x3DB', '\x3DC', '\a', 
		'z', '\x2', '\x2', '\x3DC', '\x3F4', '\x5', 'T', '+', '\x2', '\x3DD', 
		'\x3DE', '\a', 'r', '\x2', '\x2', '\x3DE', '\x3F4', '\x5', 'T', '+', '\x2', 
		'\x3DF', '\x3E0', '\a', '{', '\x2', '\x2', '\x3E0', '\x3F4', '\x5', 'T', 
		'+', '\x2', '\x3E1', '\x3E2', '\a', 'u', '\x2', '\x2', '\x3E2', '\x3F4', 
		'\x5', 'T', '+', '\x2', '\x3E3', '\x3E4', '\a', 'n', '\x2', '\x2', '\x3E4', 
		'\x3F4', '\x5', 'T', '+', '\x2', '\x3E5', '\x3E6', '\a', 'm', '\x2', '\x2', 
		'\x3E6', '\x3F4', '\x5', 'T', '+', '\x2', '\x3E7', '\x3E8', '\a', '\x6', 
		'\x2', '\x2', '\x3E8', '\x3E9', '\x5', '\x66', '\x34', '\x2', '\x3E9', 
		'\x3EA', '\a', '\a', '\x2', '\x2', '\x3EA', '\x3EB', '\x5', 'T', '+', 
		'\x2', '\x3EB', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', 
		'\a', '\x62', '\x2', '\x2', '\x3ED', '\x3F4', '\x5', 'T', '+', '\x2', 
		'\x3EE', '\x3EF', '\a', 'w', '\x2', '\x2', '\x3EF', '\x3F4', '\x5', 'T', 
		'+', '\x2', '\x3F0', '\x3F1', '\a', 'p', '\x2', '\x2', '\x3F1', '\x3F4', 
		'\x5', 'T', '+', '\x2', '\x3F2', '\x3F4', '\x5', 'j', '\x36', '\x2', '\x3F3', 
		'\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3DB', '\x3', '\x2', '\x2', 
		'\x2', '\x3F3', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x3F3', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3E5', '\x3', 
		'\x2', '\x2', '\x2', '\x3F3', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3F3', 
		'\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3EE', '\x3', '\x2', '\x2', 
		'\x2', '\x3F3', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F2', 
		'\x3', '\x2', '\x2', '\x2', '\x3F4', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x3F5', '\x3FE', '\a', '\x46', '\x2', '\x2', '\x3F6', '\x3F7', '\a', 
		'\x45', '\x2', '\x2', '\x3F7', '\x3FE', '\a', '>', '\x2', '\x2', '\x3F8', 
		'\x3F9', '\a', '\x44', '\x2', '\x2', '\x3F9', '\x3FE', '\a', '\x45', '\x2', 
		'\x2', '\x3FA', '\x3FE', '\a', '\x44', '\x2', '\x2', '\x3FB', '\x3FE', 
		'\a', '\x45', '\x2', '\x2', '\x3FC', '\x3FE', '\a', '>', '\x2', '\x2', 
		'\x3FD', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3F6', '\x3', 
		'\x2', '\x2', '\x2', '\x3FD', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3FD', 
		'\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FB', '\x3', '\x2', '\x2', 
		'\x2', '\x3FD', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FE', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x3FF', '\x402', '\x5', 'l', '\x37', '\x2', '\x400', 
		'\x401', '\a', '\v', '\x2', '\x2', '\x401', '\x403', '\x5', 'l', '\x37', 
		'\x2', '\x402', '\x400', '\x3', '\x2', '\x2', '\x2', '\x403', '\x404', 
		'\x3', '\x2', '\x2', '\x2', '\x404', '\x402', '\x3', '\x2', '\x2', '\x2', 
		'\x404', '\x405', '\x3', '\x2', '\x2', '\x2', '\x405', '\x406', '\x3', 
		'\x2', '\x2', '\x2', '\x406', '\x407', '\x5', 'p', '\x39', '\x2', '\x407', 
		'\x408', '\x5', 'T', '+', '\x2', '\x408', '\x415', '\x3', '\x2', '\x2', 
		'\x2', '\x409', '\x40E', '\x5', 'l', '\x37', '\x2', '\x40A', '\x40B', 
		'\a', 'T', '\x2', '\x2', '\x40B', '\x40D', '\x5', 'l', '\x37', '\x2', 
		'\x40C', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x410', '\x3', 
		'\x2', '\x2', '\x2', '\x40E', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x40E', 
		'\x40F', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x411', '\x3', '\x2', '\x2', 
		'\x2', '\x410', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x411', '\x412', 
		'\x5', 'p', '\x39', '\x2', '\x412', '\x413', '\x5', 'T', '+', '\x2', '\x413', 
		'\x415', '\x3', '\x2', '\x2', '\x2', '\x414', '\x3FF', '\x3', '\x2', '\x2', 
		'\x2', '\x414', '\x409', '\x3', '\x2', '\x2', '\x2', '\x415', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x416', '\x41B', '\x5', '\x64', '\x33', '\x2', '\x417', 
		'\x418', '\a', 'T', '\x2', '\x2', '\x418', '\x41A', '\x5', '\x64', '\x33', 
		'\x2', '\x419', '\x417', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41D', 
		'\x3', '\x2', '\x2', '\x2', '\x41B', '\x419', '\x3', '\x2', '\x2', '\x2', 
		'\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41E', '\x3', 
		'\x2', '\x2', '\x2', '\x41D', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41E', 
		'\x41F', '\a', 'T', '\x2', '\x2', '\x41F', '\x420', '\x5', 'T', '+', '\x2', 
		'\x420', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x421', '\x426', '\x5', 
		'\x64', '\x33', '\x2', '\x422', '\x423', '\a', '\v', '\x2', '\x2', '\x423', 
		'\x425', '\x5', '\x64', '\x33', '\x2', '\x424', '\x422', '\x3', '\x2', 
		'\x2', '\x2', '\x425', '\x428', '\x3', '\x2', '\x2', '\x2', '\x426', '\x424', 
		'\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x3', '\x2', '\x2', '\x2', 
		'\x427', '\x429', '\x3', '\x2', '\x2', '\x2', '\x428', '\x426', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '\x42A', '\a', 'T', '\x2', '\x2', '\x42A', 
		'\x42B', '\x5', 'T', '+', '\x2', '\x42B', '\x43D', '\x3', '\x2', '\x2', 
		'\x2', '\x42C', '\x431', '\x5', '\x64', '\x33', '\x2', '\x42D', '\x42E', 
		'\a', '\v', '\x2', '\x2', '\x42E', '\x430', '\a', '\x80', '\x2', '\x2', 
		'\x42F', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x430', '\x433', '\x3', 
		'\x2', '\x2', '\x2', '\x431', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x431', 
		'\x432', '\x3', '\x2', '\x2', '\x2', '\x432', '\x43D', '\x3', '\x2', '\x2', 
		'\x2', '\x433', '\x431', '\x3', '\x2', '\x2', '\x2', '\x434', '\x439', 
		'\x5', '\x64', '\x33', '\x2', '\x435', '\x436', '\a', '\v', '\x2', '\x2', 
		'\x436', '\x438', '\x5', '\x64', '\x33', '\x2', '\x437', '\x435', '\x3', 
		'\x2', '\x2', '\x2', '\x438', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x439', 
		'\x437', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43A', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x439', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x416', '\x3', '\x2', '\x2', '\x2', 
		'\x43C', '\x421', '\x3', '\x2', '\x2', '\x2', '\x43C', '\x42C', '\x3', 
		'\x2', '\x2', '\x2', '\x43C', '\x434', '\x3', '\x2', '\x2', '\x2', '\x43D', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43F', '\a', '\x80', '\x2', 
		'\x2', '\x43F', '\x440', '\a', '\r', '\x2', '\x2', '\x440', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x441', '\x443', '\x5', '`', '\x31', '\x2', '\x442', 
		'\x441', '\x3', '\x2', '\x2', '\x2', '\x442', '\x443', '\x3', '\x2', '\x2', 
		'\x2', '\x443', '\x444', '\x3', '\x2', '\x2', '\x2', '\x444', '\x44C', 
		'\x5', '\x64', '\x33', '\x2', '\x445', '\x447', '\a', '\v', '\x2', '\x2', 
		'\x446', '\x448', '\x5', '`', '\x31', '\x2', '\x447', '\x446', '\x3', 
		'\x2', '\x2', '\x2', '\x447', '\x448', '\x3', '\x2', '\x2', '\x2', '\x448', 
		'\x449', '\x3', '\x2', '\x2', '\x2', '\x449', '\x44B', '\x5', '\x64', 
		'\x33', '\x2', '\x44A', '\x445', '\x3', '\x2', '\x2', '\x2', '\x44B', 
		'\x44E', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44A', '\x3', '\x2', '\x2', 
		'\x2', '\x44C', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x44D', '\x455', 
		'\x3', '\x2', '\x2', '\x2', '\x44E', '\x44C', '\x3', '\x2', '\x2', '\x2', 
		'\x44F', '\x451', '\a', '\v', '\x2', '\x2', '\x450', '\x452', '\x5', '\x66', 
		'\x34', '\x2', '\x451', '\x450', '\x3', '\x2', '\x2', '\x2', '\x451', 
		'\x452', '\x3', '\x2', '\x2', '\x2', '\x452', '\x453', '\x3', '\x2', '\x2', 
		'\x2', '\x453', '\x454', '\a', '\xF', '\x2', '\x2', '\x454', '\x456', 
		'\a', '\x80', '\x2', '\x2', '\x455', '\x44F', '\x3', '\x2', '\x2', '\x2', 
		'\x455', '\x456', '\x3', '\x2', '\x2', '\x2', '\x456', '\x458', '\x3', 
		'\x2', '\x2', '\x2', '\x457', '\x442', '\x3', '\x2', '\x2', '\x2', '\x457', 
		'\x458', '\x3', '\x2', '\x2', '\x2', '\x458', '\x45F', '\x3', '\x2', '\x2', 
		'\x2', '\x459', '\x45B', '\x5', '\x66', '\x34', '\x2', '\x45A', '\x459', 
		'\x3', '\x2', '\x2', '\x2', '\x45A', '\x45B', '\x3', '\x2', '\x2', '\x2', 
		'\x45B', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x45D', '\a', 
		'\xF', '\x2', '\x2', '\x45D', '\x45F', '\a', '\x80', '\x2', '\x2', '\x45E', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45A', '\x3', '\x2', '\x2', 
		'\x2', '\x45F', '\x63', '\x3', '\x2', '\x2', '\x2', '\x460', '\x461', 
		'\x5', '\x66', '\x34', '\x2', '\x461', '\x462', '\a', '\x80', '\x2', '\x2', 
		'\x462', '\x65', '\x3', '\x2', '\x2', '\x2', '\x463', '\x464', '\b', '\x34', 
		'\x1', '\x2', '\x464', '\x481', '\x5', 'h', '\x35', '\x2', '\x465', '\x466', 
		'\a', '\x6', '\x2', '\x2', '\x466', '\x469', '\x5', '\x66', '\x34', '\x2', 
		'\x467', '\x468', '\a', '\v', '\x2', '\x2', '\x468', '\x46A', '\x5', '\x66', 
		'\x34', '\x2', '\x469', '\x467', '\x3', '\x2', '\x2', '\x2', '\x46A', 
		'\x46B', '\x3', '\x2', '\x2', '\x2', '\x46B', '\x469', '\x3', '\x2', '\x2', 
		'\x2', '\x46B', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x46D', 
		'\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', '\a', '\a', '\x2', '\x2', 
		'\x46E', '\x481', '\x3', '\x2', '\x2', '\x2', '\x46F', '\x470', '\a', 
		'O', '\x2', '\x2', '\x470', '\x471', '\x5', '\x66', '\x34', '\x2', '\x471', 
		'\x472', '\a', 'p', '\x2', '\x2', '\x472', '\x481', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x474', '\a', '-', '\x2', '\x2', '\x474', '\x481', '\x5', 
		'\x66', '\x34', '\b', '\x475', '\x476', '\a', 'J', '\x2', '\x2', '\x476', 
		'\x481', '\x5', '\x66', '\x34', '\a', '\x477', '\x478', '\a', 'R', '\x2', 
		'\x2', '\x478', '\x481', '\x5', '\x66', '\x34', '\x6', '\x479', '\x47A', 
		'\a', ')', '\x2', '\x2', '\x47A', '\x47B', '\a', 'l', '\x2', '\x2', '\x47B', 
		'\x47C', '\x5', '\x66', '\x34', '\x2', '\x47C', '\x47D', '\a', 'h', '\x2', 
		'\x2', '\x47D', '\x481', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x481', 
		'\x5', 'l', '\x37', '\x2', '\x47F', '\x481', '\a', '\x10', '\x2', '\x2', 
		'\x480', '\x463', '\x3', '\x2', '\x2', '\x2', '\x480', '\x465', '\x3', 
		'\x2', '\x2', '\x2', '\x480', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x480', 
		'\x473', '\x3', '\x2', '\x2', '\x2', '\x480', '\x475', '\x3', '\x2', '\x2', 
		'\x2', '\x480', '\x477', '\x3', '\x2', '\x2', '\x2', '\x480', '\x479', 
		'\x3', '\x2', '\x2', '\x2', '\x480', '\x47E', '\x3', '\x2', '\x2', '\x2', 
		'\x480', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x481', '\x4A8', '\x3', 
		'\x2', '\x2', '\x2', '\x482', '\x483', '\f', '\f', '\x2', '\x2', '\x483', 
		'\x4A7', '\a', 'p', '\x2', '\x2', '\x484', '\x485', '\f', '\v', '\x2', 
		'\x2', '\x485', '\x487', '\a', '\n', '\x2', '\x2', '\x486', '\x488', '\a', 
		'\x7F', '\x2', '\x2', '\x487', '\x486', '\x3', '\x2', '\x2', '\x2', '\x487', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x488', '\x48F', '\x3', '\x2', '\x2', 
		'\x2', '\x489', '\x48B', '\a', '\v', '\x2', '\x2', '\x48A', '\x48C', '\a', 
		'\x7F', '\x2', '\x2', '\x48B', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48B', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x48E', '\x3', '\x2', '\x2', 
		'\x2', '\x48D', '\x489', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x491', 
		'\x3', '\x2', '\x2', '\x2', '\x48F', '\x48D', '\x3', '\x2', '\x2', '\x2', 
		'\x48F', '\x490', '\x3', '\x2', '\x2', '\x2', '\x490', '\x492', '\x3', 
		'\x2', '\x2', '\x2', '\x491', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x492', 
		'\x4A7', '\a', '\f', '\x2', '\x2', '\x493', '\x494', '\f', '\n', '\x2', 
		'\x2', '\x494', '\x495', '\a', 'l', '\x2', '\x2', '\x495', '\x49A', '\x5', 
		'\x66', '\x34', '\x2', '\x496', '\x497', '\a', '\v', '\x2', '\x2', '\x497', 
		'\x499', '\x5', '\x66', '\x34', '\x2', '\x498', '\x496', '\x3', '\x2', 
		'\x2', '\x2', '\x499', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x49A', '\x498', 
		'\x3', '\x2', '\x2', '\x2', '\x49A', '\x49B', '\x3', '\x2', '\x2', '\x2', 
		'\x49B', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x49D', '\x49E', '\a', 'h', '\x2', '\x2', '\x49E', 
		'\x4A7', '\x3', '\x2', '\x2', '\x2', '\x49F', '\x4A2', '\f', '\t', '\x2', 
		'\x2', '\x4A0', '\x4A1', '\a', '\v', '\x2', '\x2', '\x4A1', '\x4A3', '\x5', 
		'\x66', '\x34', '\x2', '\x4A2', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4A3', 
		'\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A2', '\x3', '\x2', '\x2', 
		'\x2', '\x4A4', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A7', 
		'\x3', '\x2', '\x2', '\x2', '\x4A6', '\x482', '\x3', '\x2', '\x2', '\x2', 
		'\x4A6', '\x484', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x493', '\x3', 
		'\x2', '\x2', '\x2', '\x4A6', '\x49F', '\x3', '\x2', '\x2', '\x2', '\x4A7', 
		'\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A6', '\x3', '\x2', '\x2', 
		'\x2', '\x4A8', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4A9', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x4AA', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4AB', 
		'\x4DC', '\a', '\x11', '\x2', '\x2', '\x4AC', '\x4DC', '\a', '\x12', '\x2', 
		'\x2', '\x4AD', '\x4DC', '\a', '|', '\x2', '\x2', '\x4AE', '\x4DC', '\a', 
		'}', '\x2', '\x2', '\x4AF', '\x4DC', '\a', '\x13', '\x2', '\x2', '\x4B0', 
		'\x4DC', '\a', '\x14', '\x2', '\x2', '\x4B1', '\x4DC', '\a', '\x15', '\x2', 
		'\x2', '\x4B2', '\x4DC', '\a', '\x16', '\x2', '\x2', '\x4B3', '\x4DC', 
		'\a', '\x17', '\x2', '\x2', '\x4B4', '\x4DC', '\a', '~', '\x2', '\x2', 
		'\x4B5', '\x4DC', '\a', '\x18', '\x2', '\x2', '\x4B6', '\x4DC', '\a', 
		'\x19', '\x2', '\x2', '\x4B7', '\x4DC', '\a', '\x1A', '\x2', '\x2', '\x4B8', 
		'\x4C4', '\a', '\x1B', '\x2', '\x2', '\x4B9', '\x4BA', '\a', 'l', '\x2', 
		'\x2', '\x4BA', '\x4BF', '\x5', '\x66', '\x34', '\x2', '\x4BB', '\x4BC', 
		'\a', '\v', '\x2', '\x2', '\x4BC', '\x4BE', '\x5', '\x66', '\x34', '\x2', 
		'\x4BD', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4C1', '\x3', 
		'\x2', '\x2', '\x2', '\x4BF', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4BF', 
		'\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C2', '\x3', '\x2', '\x2', 
		'\x2', '\x4C1', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', 
		'\a', 'h', '\x2', '\x2', '\x4C3', '\x4C5', '\x3', '\x2', '\x2', '\x2', 
		'\x4C4', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C5', '\x3', 
		'\x2', '\x2', '\x2', '\x4C5', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4C6', 
		'\x4D2', '\a', '\x1C', '\x2', '\x2', '\x4C7', '\x4C8', '\a', 'l', '\x2', 
		'\x2', '\x4C8', '\x4CD', '\x5', '\x66', '\x34', '\x2', '\x4C9', '\x4CA', 
		'\a', '\v', '\x2', '\x2', '\x4CA', '\x4CC', '\x5', '\x66', '\x34', '\x2', 
		'\x4CB', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4CC', '\x4CF', '\x3', 
		'\x2', '\x2', '\x2', '\x4CD', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4CD', 
		'\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4D0', '\x3', '\x2', '\x2', 
		'\x2', '\x4CF', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D1', 
		'\a', 'h', '\x2', '\x2', '\x4D1', '\x4D3', '\x3', '\x2', '\x2', '\x2', 
		'\x4D2', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\x3', 
		'\x2', '\x2', '\x2', '\x4D3', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4D4', 
		'\x4DC', '\a', '\x1D', '\x2', '\x2', '\x4D5', '\x4DC', '\a', '\x1E', '\x2', 
		'\x2', '\x4D6', '\x4DC', '\a', '\x1F', '\x2', '\x2', '\x4D7', '\x4DC', 
		'\a', ' ', '\x2', '\x2', '\x4D8', '\x4DC', '\a', '!', '\x2', '\x2', '\x4D9', 
		'\x4DC', '\a', '\"', '\x2', '\x2', '\x4DA', '\x4DC', '\a', '#', '\x2', 
		'\x2', '\x4DB', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4AC', 
		'\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4AD', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4AF', '\x3', 
		'\x2', '\x2', '\x2', '\x4DB', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4DB', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4B2', '\x3', '\x2', '\x2', 
		'\x2', '\x4DB', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4B4', 
		'\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4B5', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4B7', '\x3', 
		'\x2', '\x2', '\x2', '\x4DB', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4DB', 
		'\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4D4', '\x3', '\x2', '\x2', 
		'\x2', '\x4DB', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4D6', 
		'\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4D7', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4D9', '\x3', 
		'\x2', '\x2', '\x2', '\x4DB', '\x4DA', '\x3', '\x2', '\x2', '\x2', '\x4DC', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4E1', '\a', '$', '\x2', '\x2', 
		'\x4DE', '\x4E1', '\a', '%', '\x2', '\x2', '\x4DF', '\x4E1', '\a', '&', 
		'\x2', '\x2', '\x4E0', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4DE', 
		'\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4DF', '\x3', '\x2', '\x2', '\x2', 
		'\x4E1', 'k', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E7', '\a', '\x80', 
		'\x2', '\x2', '\x4E3', '\x4E4', '\a', '\x3', '\x2', '\x2', '\x4E4', '\x4E6', 
		'\a', '\x80', '\x2', '\x2', '\x4E5', '\x4E3', '\x3', '\x2', '\x2', '\x2', 
		'\x4E6', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E5', '\x3', 
		'\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E8', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4E7', '\x3', '\x2', '\x2', 
		'\x2', '\x4EA', '\x4EC', '\x5', 'h', '\x35', '\x2', '\x4EB', '\x4E2', 
		'\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EA', '\x3', '\x2', '\x2', '\x2', 
		'\x4EC', 'm', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x506', '\x5', 'p', 
		'\x39', '\x2', '\x4EE', '\x506', '\a', '\x61', '\x2', '\x2', '\x4EF', 
		'\x506', '\a', '\x63', '\x2', '\x2', '\x4F0', '\x506', '\a', '\x62', '\x2', 
		'\x2', '\x4F1', '\x506', '\a', '\x64', '\x2', '\x2', '\x4F2', '\x506', 
		'\a', '\x65', '\x2', '\x2', '\x4F3', '\x506', '\a', '\x66', '\x2', '\x2', 
		'\x4F4', '\x506', '\a', 'g', '\x2', '\x2', '\x4F5', '\x506', '\a', 'h', 
		'\x2', '\x2', '\x4F6', '\x506', '\a', 'j', '\x2', '\x2', '\x4F7', '\x506', 
		'\a', 'l', '\x2', '\x2', '\x4F8', '\x506', '\a', 'k', '\x2', '\x2', '\x4F9', 
		'\x506', '\a', 'm', '\x2', '\x2', '\x4FA', '\x506', '\a', 'n', '\x2', 
		'\x2', '\x4FB', '\x506', '\a', 'o', '\x2', '\x2', '\x4FC', '\x506', '\a', 
		'p', '\x2', '\x2', '\x4FD', '\x506', '\a', 't', '\x2', '\x2', '\x4FE', 
		'\x506', '\a', 'q', '\x2', '\x2', '\x4FF', '\x506', '\a', 'r', '\x2', 
		'\x2', '\x500', '\x506', '\a', 'u', '\x2', '\x2', '\x501', '\x506', '\a', 
		'v', '\x2', '\x2', '\x502', '\x506', '\a', 'y', '\x2', '\x2', '\x503', 
		'\x506', '\a', 'z', '\x2', '\x2', '\x504', '\x506', '\a', '{', '\x2', 
		'\x2', '\x505', '\x4ED', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\x505', '\x4EF', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4F1', '\x3', 
		'\x2', '\x2', '\x2', '\x505', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x4F3', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4F4', '\x3', '\x2', '\x2', 
		'\x2', '\x505', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4F6', 
		'\x3', '\x2', '\x2', '\x2', '\x505', '\x4F7', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4F9', '\x3', 
		'\x2', '\x2', '\x2', '\x505', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x4FB', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4FC', '\x3', '\x2', '\x2', 
		'\x2', '\x505', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x505', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x505', '\x4FF', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x500', '\x3', '\x2', '\x2', '\x2', '\x505', '\x501', '\x3', 
		'\x2', '\x2', '\x2', '\x505', '\x502', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x503', '\x3', '\x2', '\x2', '\x2', '\x505', '\x504', '\x3', '\x2', '\x2', 
		'\x2', '\x506', 'o', '\x3', '\x2', '\x2', '\x2', '\x507', '\x508', '\t', 
		'\v', '\x2', '\x2', '\x508', 'q', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'u', '\x82', '\x86', '\x8D', '\x91', '\x9B', '\xA5', '\xAA', '\xAF', '\xB9', 
		'\xC2', '\xC6', '\xCB', '\xD1', '\xD8', '\xE2', '\xE6', '\xE9', '\xEE', 
		'\xF2', '\xF7', '\xFC', '\x109', '\x10D', '\x110', '\x115', '\x119', '\x122', 
		'\x12C', '\x130', '\x133', '\x13D', '\x142', '\x149', '\x14D', '\x153', 
		'\x15B', '\x15E', '\x165', '\x16E', '\x171', '\x176', '\x17F', '\x182', 
		'\x187', '\x189', '\x18E', '\x193', '\x19D', '\x1A4', '\x1A8', '\x1AD', 
		'\x1B0', '\x1B6', '\x1BB', '\x1C0', '\x1C4', '\x1C9', '\x1CC', '\x1D2', 
		'\x1D7', '\x1DD', '\x1E0', '\x1E6', '\x1EF', '\x1F4', '\x1F8', '\x204', 
		'\x20C', '\x214', '\x219', '\x21E', '\x222', '\x22A', '\x232', '\x234', 
		'\x237', '\x23F', '\x247', '\x249', '\x250', '\x256', '\x25B', '\x274', 
		'\x27A', '\x27F', '\x294', '\x2A1', '\x2A8', '\x2AC', '\x2B1', '\x2BC', 
		'\x2C1', '\x2C8', '\x2CF', '\x2D9', '\x2DE', '\x2E9', '\x2EE', '\x2F1', 
		'\x2F5', '\x2F9', '\x2FE', '\x303', '\x306', '\x311', '\x314', '\x317', 
		'\x31F', '\x322', '\x32B', '\x32F', '\x338', '\x343', '\x34B', '\x34D', 
		'\x356', '\x35C', '\x361', '\x365', '\x370', '\x37D', '\x383', '\x389', 
		'\x38E', '\x3BD', '\x3BF', '\x3CB', '\x3D3', '\x3D7', '\x3F3', '\x3FD', 
		'\x404', '\x40E', '\x414', '\x41B', '\x426', '\x431', '\x439', '\x43C', 
		'\x442', '\x447', '\x44C', '\x451', '\x455', '\x457', '\x45A', '\x45E', 
		'\x46B', '\x480', '\x487', '\x48B', '\x48F', '\x49A', '\x4A4', '\x4A6', 
		'\x4A8', '\x4BF', '\x4C4', '\x4CD', '\x4D2', '\x4DB', '\x4E0', '\x4E7', 
		'\x4EB', '\x505',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
